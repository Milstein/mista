#Test code generated by MISTA

import json
import urllib
import httplib
from scapy.all import *

import unittest

import os, sys, socket, struct, select, time 
from threading import Thread

import logging
import traceback

from mininet.net import Mininet
from mininet.node import OVSSwitch, OVSKernelSwitch, Controller, RemoteController
from mininet.log import setLogLevel, info
from mininet.cli import CLI



class FirewallTester_RT( unittest.TestCase):

	
	
		def setUp(self):
	        	self.controllerIp="127.0.0.1"
			self.switch = "00:00:00:00:00:00:00:01"
			self.destinationIp = "10.0.0.1"
			self.startTime_ = time.time()
			self.failed = False
			self.reportStatus_ = True
			self.name_ = "Firewall"
			self.log = logging.getLogger("unittest")
	
			self.CreateNet()
	
			Precondition.SetPreconditionS1(self)
			Postcondition.CheckConditionS1(self)

		def tearDown(self):
			if self.failed:
				return
			duration = time.time() - self.startTime_
			self.cleanup(True)
			if self.reportStatus_:
				self.log.info("=== Test %s completed normally (%d sec)", self.name_, duration)

	def test1() :
		print "Test case 1"
		EnableFirewall(self)
		self.assert_(checkConditionS1(self), '1_1')
		DisableFirewall(self)
		self.assert_(checkConditionS5(self), '1_1_1')
	

	def test2() :
		print "Test case 2"
		EnableFirewall(self)
		addFlowRule()
		self.assert_(checkConditionS1(self), '1_1_2')
		self.assert_(flowTable(DENY), '1_1_2')
		DisableFirewall(self)
		self.assert_(checkConditionS5(self), '1_1_2_1')
		self.assert_(flowTable(DENY), '1_1_2_1')
		EnableFirewall(self)
		self.assert_(checkConditionS1(self), '1_1_2_1_1')
		self.assert_(flowTable(DENY), '1_1_2_1_1')
	

	def test3() :
		print "Test case 3"
		EnableFirewall(self)
		addFlowRule()
		DisableFirewall(self)
		addFlowRule()
		self.assert_(checkConditionS5(self), '1_1_2_1_2')
		self.assert_(flowTable(DENY), '1_1_2_1_2')
		self.assert_(flowTable(PERMIT), '1_1_2_1_2')
		EnableFirewall(self)
		self.assert_(checkConditionS1(self), '1_1_2_1_2_1')
		self.assert_(flowTable(DENY), '1_1_2_1_2_1')
		self.assert_(flowTable(PERMIT), '1_1_2_1_2_1')
	

	def test4() :
		print "Test case 4"
		EnableFirewall(self)
		addFlowRule()
		DisableFirewall(self)
		addFlowRule()
		addFlowRule()
		self.assert_(checkConditionS5(self), '1_1_2_1_2_2')
		self.assert_(flowTable(DENY), '1_1_2_1_2_2')
		self.assert_(flowTable(PERMIT), '1_1_2_1_2_2')
	

	def test5() :
		print "Test case 5"
		EnableFirewall(self)
		addFlowRule()
		DisableFirewall(self)
		addFlowRule()
		addFirewallRule()
		self.assert_(checkConditionS5(self), '1_1_2_1_2_3')
		self.assert_(firewallTable(), '1_1_2_1_2_3')
		self.assert_(flowTable(DENY), '1_1_2_1_2_3')
		self.assert_(flowTable(PERMIT), '1_1_2_1_2_3')
		EnableFirewall(self)
		self.assert_(checkConditionS1(self), '')
		self.assert_(firewallTable(), '')
		self.assert_(flowTable(DENY), '')
		self.assert_(flowTable(PERMIT), '')
	

	def test6() :
		print "Test case 6"
		EnableFirewall(self)
		addFlowRule()
		DisableFirewall(self)
		addFlowRule()
		addFirewallRule()
		addFlowRule()
		self.assert_(checkConditionS5(self), '')
		self.assert_(firewallTable(), '')
		self.assert_(flowTable(DENY), '')
		self.assert_(flowTable(PERMIT), '')
	

	def test7() :
		print "Test case 7"
		EnableFirewall(self)
		addFlowRule()
		DisableFirewall(self)
		addFlowRule()
		addFirewallRule()
		addFirewallRule()
		self.assert_(checkConditionS5(self), '')
		self.assert_(firewallTable(), '')
		self.assert_(flowTable(DENY), '')
		self.assert_(flowTable(PERMIT), '')
	

	def test8() :
		print "Test case 8"
		EnableFirewall(self)
		addFlowRule()
		DisableFirewall(self)
		addFirewallRule()
		self.assert_(checkConditionS5(self), '1_1_2_1_3')
		self.assert_(firewallTable(), '1_1_2_1_3')
		self.assert_(flowTable(DENY), '1_1_2_1_3')
		EnableFirewall(self)
		self.assert_(checkConditionS1(self), '1_1_2_1_3_1')
		self.assert_(firewallTable(), '1_1_2_1_3_1')
		self.assert_(flowTable(DENY), '1_1_2_1_3_1')
	

	def test9() :
		print "Test case 9"
		EnableFirewall(self)
		addFlowRule()
		DisableFirewall(self)
		addFirewallRule()
		addFlowRule()
		self.assert_(checkConditionS5(self), '1_1_2_1_3_2')
		self.assert_(firewallTable(), '1_1_2_1_3_2')
		self.assert_(flowTable(DENY), '1_1_2_1_3_2')
		self.assert_(flowTable(PERMIT), '1_1_2_1_3_2')
	

	def test10() :
		print "Test case 10"
		EnableFirewall(self)
		addFlowRule()
		DisableFirewall(self)
		addFirewallRule()
		addFirewallRule()
		self.assert_(checkConditionS5(self), '1_1_2_1_3_3')
		self.assert_(firewallTable(), '1_1_2_1_3_3')
		self.assert_(flowTable(DENY), '1_1_2_1_3_3')
	

	def test11() :
		print "Test case 11"
		EnableFirewall(self)
		addFlowRule()
		addFlowRule()
		self.assert_(checkConditionS1(self), '1_1_2_2')
		self.assert_(flowTable(DENY), '1_1_2_2')
	

	def test12() :
		print "Test case 12"
		EnableFirewall(self)
		addFlowRule()
		addFirewallRule()
		self.assert_(checkConditionS1(self), '1_1_2_3')
		self.assert_(firewallTable(), '1_1_2_3')
		self.assert_(flowTable(DENY), '1_1_2_3')
		DisableFirewall(self)
		self.assert_(checkConditionS5(self), '1_1_2_3_1')
		self.assert_(firewallTable(), '1_1_2_3_1')
		self.assert_(flowTable(DENY), '1_1_2_3_1')
	

	def test13() :
		print "Test case 13"
		EnableFirewall(self)
		addFlowRule()
		addFirewallRule()
		addFlowRule()
		self.assert_(checkConditionS1(self), '1_1_2_3_2')
		self.assert_(firewallTable(), '1_1_2_3_2')
		self.assert_(flowTable(DENY), '1_1_2_3_2')
	

	def test14() :
		print "Test case 14"
		EnableFirewall(self)
		addFlowRule()
		addFirewallRule()
		addFirewallRule()
		self.assert_(checkConditionS1(self), '1_1_2_3_3')
		self.assert_(firewallTable(), '1_1_2_3_3')
		self.assert_(flowTable(DENY), '1_1_2_3_3')
	

	def test15() :
		print "Test case 15"
		EnableFirewall(self)
		addFirewallRule()
		self.assert_(checkConditionS1(self), '1_1_3')
		self.assert_(firewallTable(), '1_1_3')
		DisableFirewall(self)
		self.assert_(checkConditionS5(self), '1_1_3_1')
		self.assert_(firewallTable(), '1_1_3_1')
	

	def test16() :
		print "Test case 16"
		EnableFirewall(self)
		addFirewallRule()
		addFlowRule()
		self.assert_(checkConditionS1(self), '1_1_3_2')
		self.assert_(firewallTable(), '1_1_3_2')
	

	def test17() :
		print "Test case 17"
		EnableFirewall(self)
		addFirewallRule()
		addFirewallRule()
		self.assert_(checkConditionS1(self), '1_1_3_3')
		self.assert_(firewallTable(), '1_1_3_3')
	

	def test18() :
		print "Test case 18"
		addFlowRule()
		self.assert_(checkConditionS5(self), '1_2')
		self.assert_(flowTable(PERMIT), '1_2')
		EnableFirewall(self)
		self.assert_(checkConditionS1(self), '1_2_1')
		self.assert_(flowTable(PERMIT), '1_2_1')
		DisableFirewall(self)
		self.assert_(checkConditionS5(self), '1_2_1_1')
		self.assert_(flowTable(PERMIT), '1_2_1_1')
	

	def test19() :
		print "Test case 19"
		addFlowRule()
		EnableFirewall(self)
		addFlowRule()
		self.assert_(checkConditionS1(self), '1_2_1_2')
		self.assert_(flowTable(DENY), '1_2_1_2')
		self.assert_(flowTable(PERMIT), '1_2_1_2')
		DisableFirewall(self)
		self.assert_(checkConditionS5(self), '1_2_1_2_1')
		self.assert_(flowTable(DENY), '1_2_1_2_1')
		self.assert_(flowTable(PERMIT), '1_2_1_2_1')
	

	def test20() :
		print "Test case 20"
		addFlowRule()
		EnableFirewall(self)
		addFlowRule()
		addFlowRule()
		self.assert_(checkConditionS1(self), '1_2_1_2_2')
		self.assert_(flowTable(DENY), '1_2_1_2_2')
		self.assert_(flowTable(PERMIT), '1_2_1_2_2')
	

	def test21() :
		print "Test case 21"
		addFlowRule()
		EnableFirewall(self)
		addFlowRule()
		addFirewallRule()
		self.assert_(checkConditionS1(self), '1_2_1_2_3')
		self.assert_(firewallTable(), '1_2_1_2_3')
		self.assert_(flowTable(DENY), '1_2_1_2_3')
		self.assert_(flowTable(PERMIT), '1_2_1_2_3')
		DisableFirewall(self)
		self.assert_(checkConditionS5(self), '1_2_1_2_3_1')
		self.assert_(firewallTable(), '1_2_1_2_3_1')
		self.assert_(flowTable(DENY), '1_2_1_2_3_1')
		self.assert_(flowTable(PERMIT), '1_2_1_2_3_1')
	

	def test22() :
		print "Test case 22"
		addFlowRule()
		EnableFirewall(self)
		addFlowRule()
		addFirewallRule()
		addFlowRule()
		self.assert_(checkConditionS1(self), '1_2_1_2_3_2')
		self.assert_(firewallTable(), '1_2_1_2_3_2')
		self.assert_(flowTable(DENY), '1_2_1_2_3_2')
		self.assert_(flowTable(PERMIT), '1_2_1_2_3_2')
	

	def test23() :
		print "Test case 23"
		addFlowRule()
		EnableFirewall(self)
		addFlowRule()
		addFirewallRule()
		addFirewallRule()
		self.assert_(checkConditionS1(self), '1_2_1_2_3_3')
		self.assert_(firewallTable(), '1_2_1_2_3_3')
		self.assert_(flowTable(DENY), '1_2_1_2_3_3')
		self.assert_(flowTable(PERMIT), '1_2_1_2_3_3')
	

	def test24() :
		print "Test case 24"
		addFlowRule()
		EnableFirewall(self)
		addFirewallRule()
		self.assert_(checkConditionS1(self), '1_2_1_3')
		self.assert_(firewallTable(), '1_2_1_3')
		self.assert_(flowTable(PERMIT), '1_2_1_3')
		DisableFirewall(self)
		self.assert_(checkConditionS5(self), '1_2_1_3_1')
		self.assert_(firewallTable(), '1_2_1_3_1')
		self.assert_(flowTable(PERMIT), '1_2_1_3_1')
	

	def test25() :
		print "Test case 25"
		addFlowRule()
		EnableFirewall(self)
		addFirewallRule()
		addFlowRule()
		self.assert_(checkConditionS1(self), '1_2_1_3_2')
		self.assert_(firewallTable(), '1_2_1_3_2')
		self.assert_(flowTable(PERMIT), '1_2_1_3_2')
	

	def test26() :
		print "Test case 26"
		addFlowRule()
		EnableFirewall(self)
		addFirewallRule()
		addFirewallRule()
		self.assert_(checkConditionS1(self), '1_2_1_3_3')
		self.assert_(firewallTable(), '1_2_1_3_3')
		self.assert_(flowTable(PERMIT), '1_2_1_3_3')
	

	def test27() :
		print "Test case 27"
		addFlowRule()
		addFlowRule()
		self.assert_(checkConditionS5(self), '1_2_2')
		self.assert_(flowTable(PERMIT), '1_2_2')
	

	def test28() :
		print "Test case 28"
		addFlowRule()
		addFirewallRule()
		self.assert_(checkConditionS5(self), '1_2_3')
		self.assert_(firewallTable(), '1_2_3')
		self.assert_(flowTable(PERMIT), '1_2_3')
		EnableFirewall(self)
		self.assert_(checkConditionS1(self), '1_2_3_1')
		self.assert_(firewallTable(), '1_2_3_1')
		self.assert_(flowTable(PERMIT), '1_2_3_1')
	

	def test29() :
		print "Test case 29"
		addFlowRule()
		addFirewallRule()
		addFlowRule()
		self.assert_(checkConditionS5(self), '1_2_3_2')
		self.assert_(firewallTable(), '1_2_3_2')
		self.assert_(flowTable(PERMIT), '1_2_3_2')
	

	def test30() :
		print "Test case 30"
		addFlowRule()
		addFirewallRule()
		addFirewallRule()
		self.assert_(checkConditionS5(self), '1_2_3_3')
		self.assert_(firewallTable(), '1_2_3_3')
		self.assert_(flowTable(PERMIT), '1_2_3_3')
	

	def test31() :
		print "Test case 31"
		addFirewallRule()
		self.assert_(checkConditionS5(self), '1_3')
		self.assert_(firewallTable(), '1_3')
		EnableFirewall(self)
		self.assert_(checkConditionS1(self), '1_3_1')
		self.assert_(firewallTable(), '1_3_1')
	

	def test32() :
		print "Test case 32"
		addFirewallRule()
		addFlowRule()
		self.assert_(checkConditionS5(self), '1_3_2')
		self.assert_(firewallTable(), '1_3_2')
		self.assert_(flowTable(PERMIT), '1_3_2')
	

	def test33() :
		print "Test case 33"
		addFirewallRule()
		addFirewallRule()
		self.assert_(checkConditionS5(self), '1_3_3')
		self.assert_(firewallTable(), '1_3_3')
	


	#1	
	def EnableFirewall(self):
		command = "http://%s:8080/wm/firewall/module/enable/json" % self.controllerIp
	  	urllib.urlopen(command)	
		# sleep to time out previous flows in switches
	  	#time.sleep(5)			
	
	#2	
	def DisableFirewall(self):
		command = "http://%s:8080/wm/firewall/module/disable/json" % self.controllerIp
	  	urllib.urlopen(command)
		
		# sleep to time out previous flows in switches
	  	#time.sleep(5)
	
	#3
	def checkConditionS1(self):		
		return CheckStatus.CheckFirewallEnabled(self))	and  CheckStatus.CheckFirewallTableEmpty(self))  and CheckStatus.CheckFlowTableEmpty(self))	
	
	#4
	def checkConditionS5(self):
		return not CheckStatus.CheckFirewallEnabled(self)) and CheckStatus.CheckFirewallTableEmpty(self)) and CheckStatus.CheckFlowTableEmpty(self))
	
	
	if __name__ == '__main__':
		suite = unittest.TestSuite()
		suite.addTest(unittest.makeSuite(FirewallTester_RT))
		unittest.TextTestRunner(verbosity=2).run(suite)