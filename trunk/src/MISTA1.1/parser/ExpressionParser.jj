options {
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = true;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(ExpressionParser)
package parser;

import java.util.*;
import java.io.*;

import locales.LocaleBundle;
import mid.*;

public class ExpressionParser {

	// constructors are generated
	
	public static String parseExpression(String inString) throws ParseException {
		Reader reader = null;
		try {
			reader = new StringReader(inString) ;
			ExpressionParser parser = new ExpressionParser(reader) ;
			return parser.ArithmeticExpression(); 
	    } 
	    catch (ParseException e) {
	    	throw e;
	    }
		catch (TokenMgrError e){
	    	throw e;
		}
		finally {
			try {reader.close();	}
			catch (IOException ioe) {}
		}
	}	

	public static ArrayList<String> collectExpressionVariables(String inString) throws ParseException {
		Reader reader = null;
		try {
			reader = new StringReader(inString) ;
			ExpressionParser parser = new ExpressionParser(reader) ;
			return parser.collectExpressionVariables(); 
	    } 
	    catch (ParseException e) {
	    	throw e;
	    }
		catch (TokenMgrError e){
	    	throw e;
		}
		finally {
			try {reader.close();	}
			catch (IOException ioe) {}
		}
	}	

	public static String evaluateExpression(String inString, MID mid, Hashtable <String, String> bindings) throws ParseException {
		Reader reader = null;
		try {
			reader = new StringReader(inString) ;
			ExpressionParser parser = new ExpressionParser(reader) ;
			return parser.evaluateExpression(mid, bindings); 
	    } 
	    catch (ParseException e) {
	    	throw e;
	    }
		catch (TokenMgrError e){
	    	throw e;
		}
		finally {
			try {reader.close();	}
			catch (IOException ioe) {}
		}
	}	

	
	private static String exceptionMessage(ParseException e) {
		return e.toString().replace("parser.ParseException:", "");
	}

	private static String exceptionMessage(TokenMgrError e) {
		return e.toString().replace("parser.TokenMgrError:", "");
	}
	
	public static String removeQuotesFromString(String s) {
//		return s.replace('"', ' ').trim();
		if (s.charAt(0)!='"')
			return s;
		String temp = s.substring(1, s.length()-1); // remove first and last ""
//System.out.println("New S: "+ temp.replace("\\\"", "\""));
		return temp.replace("\\\"", "\""); 
	}
		
}

PARSER_END(ExpressionParser)

SKIP :
{ 	  "\t" 
	| "/*" : WithinComment | " " | "\n" | "\r"
}


<WithinComment> SKIP :
{
  "*/" : DEFAULT
}
<WithinComment> MORE :
{
  <~[]>
}

SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}
TOKEN : /* IDENTIFIERS */
{
  <IDENTIFIER: <LETTER>(<LETTER>|<DIGIT>|<DOT>|<UNDERSCORE>)*>
  |<SPECIALVAR: "?"(<LETTER>|<DIGIT>)+>
  |<INTEGER: (<DIGIT>)+>
  |
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
|
< STRING : "\""
   ( ( ~["\"","\\","\n","\r", "\t"])
   | ("\\" (
             ["n","t","v","b","r","f","a","\\","?","'","\""]
            |
             "0" (["0"-"7"])*
            |
             ["1"-"9"] (["0"-"9"])*
            |
             ("0x" | "0X") (["0"-"9","a"-"f","A"-"F"])+
           )
     )
   | (["\n","\r", "\t"])
   )*
   "\"" 
>
  
  
}

TOKEN :
{
  <LPAREN: "(" >
| <RPAREN: ")" >
| <LARROW: "<" >
| <RARROW: ">" >
| <LBRACE: "{" >
| <RBRACE: "}" >
| <LBRACKET: "[" >
| <RBRACKET: "]" >
| <SEMICOLON: ";" >
| <DOT: "." >
| <UNDERSCORE: "_" >
| <COMMA: "," >
| <COLON: ":">
| <SLASH: "/">
}

String ArithmeticExpression() :
{	String  expStr = ""; 
}
{
	(
		(<SPECIALVAR>|<INTEGER>|<STRING>|<IDENTIFIER>) {expStr = token.toString();}
		|
		("-"
		 <INTEGER> {expStr = "-"+token.toString();}
		)
		| 
		(	<LPAREN> {expStr = "("+ ArithmeticExpression();}	
			<RPAREN> {expStr += ")";}
		)
	)
	(
		("+"|"-"|"*"|"/"|"%") {expStr += token.toString() + ArithmeticExpression();}
	)* 
	{
		return expStr;
	}
}

ArrayList<String> collectExpressionVariables() :
{	ArrayList<String>  variables = new ArrayList<String>(); 
}
{
	(
		(<SPECIALVAR>|<INTEGER>|<STRING>|<IDENTIFIER>) 
			{
				if (MID.isVariable(token.toString()))
					variables.add(token.toString());
			}
		|
		("-"
		 <INTEGER> {}
		)
		| 
		(	<LPAREN> 
					{	ArrayList<String> subvars= collectExpressionVariables();
					 	for (String var: subvars)
					 		variables.add(var); 
					}	
			<RPAREN> 
		)
	)
	(
		("+"|"-"|"*"|"/"|"%") 
					{	ArrayList<String> subvars= collectExpressionVariables();
					 	for (String var: subvars)
					 		variables.add(var); 
					 }
	)* 
	{
		return variables;
	}
}

String evaluateExpression(MID mid, Hashtable <String, String> bindings) :
{	
	ArrayList<String>  ops = new ArrayList<String>(); 
}
{
	(
		(<SPECIALVAR>|<INTEGER>|<STRING>|<IDENTIFIER>) 
			{
				ops.add(token.toString());
			}
		|
		("-"
		 <INTEGER> {ops.add("-"+token.toString());}
		)
		| 
		(	<LPAREN> 
					{	ops.add(evaluateExpression(mid, bindings));
					}	
			<RPAREN> 
		)
	)
	(
		("+"|"-"|"*"|"/"|"%") 
					{   
						ops.add(token.toString());
					}
		(
		(<SPECIALVAR>|<INTEGER>|<STRING>|<IDENTIFIER>) 
			{
				ops.add(token.toString());
			}
		| 
		(	<LPAREN> 
					{	ops.add(evaluateExpression(mid, bindings));
					}	
			<RPAREN> 
		)
		)
	)* 
	{
//for (String item: ops)
//System.out.println(item);		
		int index;
		if (ops.size()>2){
			index=0;
			while (index<ops.size()-2){
				int op = Functions.getArithmeticOperator(ops.get(index+1));
				if (op==Functions.MULTIPLICATION || op==Functions.DIVISION || op==Functions.MODULUSOP) {
					ops.set(index, Functions.compute(op, ops.get(index), ops.get(index+2), bindings));
					ops.remove(index+2);
					ops.remove(index+1);
				} else {
					index+=2;
				}
			}
		}
		String result = ops.get(0);
		index = 1;
		while (index<ops.size()){
			int op = Functions.getArithmeticOperator(ops.get(index));
			result = Functions.compute(op, result, ops.get(index+1), bindings);
			index+=2;
		}
		return result;
	}
}


