/* Generated By:JavaCC: Do not edit this line. ExpressionParser.java */
package parser;

import java.util.*;
import java.io.*;

import locales.LocaleBundle;
import mid.*;

public class ExpressionParser implements ExpressionParserConstants {

        // constructors are generated

        public static String parseExpression(String inString) throws ParseException {
                Reader reader = null;
                try {
                        reader = new StringReader(inString) ;
                        ExpressionParser parser = new ExpressionParser(reader) ;
                        return parser.ArithmeticExpression();
            }
            catch (ParseException e) {
                throw e;
            }
                catch (TokenMgrError e){
                throw e;
                }
                finally {
                        try {reader.close();    }
                        catch (IOException ioe) {}
                }
        }

        public static ArrayList<String> collectExpressionVariables(String inString) throws ParseException {
                Reader reader = null;
                try {
                        reader = new StringReader(inString) ;
                        ExpressionParser parser = new ExpressionParser(reader) ;
                        return parser.collectExpressionVariables();
            }
            catch (ParseException e) {
                throw e;
            }
                catch (TokenMgrError e){
                throw e;
                }
                finally {
                        try {reader.close();    }
                        catch (IOException ioe) {}
                }
        }

        public static String evaluateExpression(String inString, MID mid, Hashtable <String, String> bindings) throws ParseException {
                Reader reader = null;
                try {
                        reader = new StringReader(inString) ;
                        ExpressionParser parser = new ExpressionParser(reader) ;
                        return parser.evaluateExpression(mid, bindings);
            }
            catch (ParseException e) {
                throw e;
            }
                catch (TokenMgrError e){
                throw e;
                }
                finally {
                        try {reader.close();    }
                        catch (IOException ioe) {}
                }
        }


        private static String exceptionMessage(ParseException e) {
                return e.toString().replace("parser.ParseException:", "");
        }

        private static String exceptionMessage(TokenMgrError e) {
                return e.toString().replace("parser.TokenMgrError:", "");
        }

        public static String removeQuotesFromString(String s) {
//		return s.replace('"', ' ').trim();
                if (s.charAt(0)!='"')
                        return s;
                String temp = s.substring(1, s.length()-1); // remove first and last ""
//System.out.println("New S: "+ temp.replace("\\\"", "\""));
                return temp.replace("\\\"", "\"");
        }

  final public String ArithmeticExpression() throws ParseException {
        String  expStr = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case SPECIALVAR:
    case INTEGER:
    case STRING:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPECIALVAR:
        jj_consume_token(SPECIALVAR);
        break;
      case INTEGER:
        jj_consume_token(INTEGER);
        break;
      case STRING:
        jj_consume_token(STRING);
        break;
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                expStr = token.toString();
      break;
    case 29:
      jj_consume_token(29);
      jj_consume_token(INTEGER);
                            expStr = "-"+token.toString();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
                                  expStr = "("+ ArithmeticExpression();
      jj_consume_token(RPAREN);
                                  expStr += ")";
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SLASH:
      case 29:
      case 30:
      case 31:
      case 32:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 30:
        jj_consume_token(30);
        break;
      case 29:
        jj_consume_token(29);
        break;
      case 31:
        jj_consume_token(31);
        break;
      case SLASH:
        jj_consume_token(SLASH);
        break;
      case 32:
        jj_consume_token(32);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                       expStr += token.toString() + ArithmeticExpression();
    }
                {if (true) return expStr;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<String> collectExpressionVariables() throws ParseException {
        ArrayList<String>  variables = new ArrayList<String>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case SPECIALVAR:
    case INTEGER:
    case STRING:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPECIALVAR:
        jj_consume_token(SPECIALVAR);
        break;
      case INTEGER:
        jj_consume_token(INTEGER);
        break;
      case STRING:
        jj_consume_token(STRING);
        break;
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                if (MID.isVariable(token.toString()))
                                        variables.add(token.toString());
      break;
    case 29:
      jj_consume_token(29);
      jj_consume_token(INTEGER);

      break;
    case LPAREN:
      jj_consume_token(LPAREN);
                                                ArrayList<String> subvars= collectExpressionVariables();
                                                for (String var: subvars)
                                                        variables.add(var);
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SLASH:
      case 29:
      case 30:
      case 31:
      case 32:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 30:
        jj_consume_token(30);
        break;
      case 29:
        jj_consume_token(29);
        break;
      case 31:
        jj_consume_token(31);
        break;
      case SLASH:
        jj_consume_token(SLASH);
        break;
      case 32:
        jj_consume_token(32);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                ArrayList<String> subvars= collectExpressionVariables();
                                                for (String var: subvars)
                                                        variables.add(var);
    }
                {if (true) return variables;}
    throw new Error("Missing return statement in function");
  }

  final public String evaluateExpression(MID mid, Hashtable <String, String> bindings) throws ParseException {
        ArrayList<String>  ops = new ArrayList<String>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case SPECIALVAR:
    case INTEGER:
    case STRING:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPECIALVAR:
        jj_consume_token(SPECIALVAR);
        break;
      case INTEGER:
        jj_consume_token(INTEGER);
        break;
      case STRING:
        jj_consume_token(STRING);
        break;
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                ops.add(token.toString());
      break;
    case 29:
      jj_consume_token(29);
      jj_consume_token(INTEGER);
                            ops.add("-"+token.toString());
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
                                                ops.add(evaluateExpression(mid, bindings));
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SLASH:
      case 29:
      case 30:
      case 31:
      case 32:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 30:
        jj_consume_token(30);
        break;
      case 29:
        jj_consume_token(29);
        break;
      case 31:
        jj_consume_token(31);
        break;
      case SLASH:
        jj_consume_token(SLASH);
        break;
      case 32:
        jj_consume_token(32);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                ops.add(token.toString());
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case SPECIALVAR:
      case INTEGER:
      case STRING:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPECIALVAR:
          jj_consume_token(SPECIALVAR);
          break;
        case INTEGER:
          jj_consume_token(INTEGER);
          break;
        case STRING:
          jj_consume_token(STRING);
          break;
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                ops.add(token.toString());
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
                                                ops.add(evaluateExpression(mid, bindings));
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
//for (String item: ops)
//System.out.println(item);		
                int index;
                if (ops.size()>2){
                        index=0;
                        while (index<ops.size()-2){
                                int op = Functions.getArithmeticOperator(ops.get(index+1));
                                if (op==Functions.MULTIPLICATION || op==Functions.DIVISION || op==Functions.MODULUSOP) {
                                        ops.set(index, Functions.compute(op, ops.get(index), ops.get(index+2), bindings));
                                        ops.remove(index+2);
                                        ops.remove(index+1);
                                } else {
                                        index+=2;
                                }
                        }
                }
                String result = ops.get(0);
                index = 1;
                while (index<ops.size()){
                        int op = Functions.getArithmeticOperator(ops.get(index));
                        result = Functions.compute(op, result, ops.get(index+1), bindings);
                        index+=2;
                }
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  public ExpressionParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x4e00,0x2000ce00,0xf0000000,0xf0000000,0x4e00,0x2000ce00,0xf0000000,0xf0000000,0x4e00,0x2000ce00,0xf0000000,0xf0000000,0x4e00,0xce00,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x1,0x1,0x0,0x0,0x1,0x1,0x0,0x0,0x1,0x1,0x0,0x0,};
   }

  public ExpressionParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public ExpressionParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  public ExpressionParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  public ExpressionParser(ExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  public void ReInit(ExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[33];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 33; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
