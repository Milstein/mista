#Test code generated by MISTA

#! /usr/bin/env python

import json
import urllib
import httplib
from scapy.all import *

import unittest

import os, sys, socket, struct, select, time 
from threading import Thread

import logging
import traceback

from mininet.net import Mininet
from mininet.node import OVSSwitch, OVSKernelSwitch, Controller, RemoteController
from mininet.log import setLogLevel, info
from mininet.cli import CLI


class FirewallTester_RT( unittest.TestCase):

	
	
	def setUp(self):
		self.controllerIp="127.0.0.1"
		self.switch = "00:00:00:00:00:00:00:01"
		self.destinationIp = "10.0.0.1"
		self.startTime_ = time.time()
		self.failed = False
		self.reportStatus_ = True
		self.name_ = "Firewall"
		self.log = logging.getLogger("unittest")
	
		self.CreateNet()
	
		self.SetPreconditionS1()
		self.CheckConditionS1()

	def tearDown(self):
		if self.failed:
			return
		duration = time.time() - self.startTime_
		self.cleanup(True)
		if self.reportStatus_:
			self.log.info("=== Test %s completed normally (%d sec)", self.name_, duration)
	
	def cleanup(self, success):		
		try:
			self.SetFinalcondition()
			return
		except NameError:
			self.log.error("Exception hit during cleanup, bypassing:\n%s\n\n" % traceback.format_exc())	
	
	def SetFinalcondition(self):
		self.SetFinalcondition()
	
		info( '*** Stopping network' )
		self.net.stop()
			
	def SetFinalcondition(self):
		self.DisableFirewall()
		
		# cleanup all Firewall rules
		self.CleanUpFirewallRules()
	
		# Delete flow
		self.DeleteFlow()

	def test1(self) :
		print "Test case 1"
		self.EnableFirewall()
		self.assertTrue(self.checkConditionS1())
		self.DisableFirewall()
		self.assertTrue(self.checkConditionS5())
	

	
if __name__ == '__main__':
	suite = unittest.TestSuite():
	suite.addTest(FirewallTester_RT("test1"))
	


	# Create the Mininet Topology		
	def CreateNet(self):	
		"Create an empty network and add nodes to it."
		self.net = Mininet( controller=RemoteController )
	
		info( '*** Adding controller\n' )
		self.net.addController( 'c0' , controller=RemoteController,ip= "127.0.0.1", port=6633)
	
		info( '*** Adding hosts\n' )
		h1 = self.net.addHost( 'h1', ip='10.0.0.1' )
		h2 = self.net.addHost( 'h2', ip='10.0.0.2' )
		h3 = self.net.addHost( 'h3', ip='10.0.0.3' )
	
		info( '*** Adding switch\n' )
		s1 = self.net.addSwitch( 's1' )
	
		info( '*** Creating links\n' )
		self.net.addLink( h1, s1 )
		self.net.addLink( h2, s1 )
		self.net.addLink( h3, s1 )	
	
		info( '*** Starting network' )
		self.net.start()
		
	# Set Pre-condition 		
	def SetPreconditionS1(self):
		self.EnableFirewall()
		# cleanup all Firewall rules
		self.CleanUpFirewallRules()
		# Delete flow
		self.DeleteFlow()
	
	#Post-conditions Assertion
	def CheckConditionS1(self):		
		return (self.CheckFirewallEnabled() and self.CheckFirewallTableEmpty() and self.CheckFlowTableEmpty())
			
	def CheckConditionS5(self):
		return (not self.CheckFirewallEnabled() and self.CheckFirewallTableEmpty() and self.CheckFlowTableEmpty())
		
	# Check Status
	def CheckFirewallEnabled(self):
		command = "http://%s:8080/wm/firewall/module/status/json" % self.controllerIp
		x = urllib.urlopen(command).read()
		parsedResult = json.loads(x)
		if("enabled" in parsedResult['result']):
			return True		
		elif("disabled" in parsedResult['result']):
			return False
		else: 
			return False
	
	def CheckFirewallTableEmpty(self):
		command = "http://%s:8080/wm/firewall/rules/json" % self.controllerIp
		x = urllib.urlopen(command).read()
		if("[]" in x):
			return True	
		else: 
			return False
	
	def CheckFlowTableEmpty(self):	
		command = "http://%s:8080/wm/staticflowentrypusher/list/%s/json" % (self.controllerIp, self.switch)
		x = urllib.urlopen(command).read()
		parsedResult = json.loads(x)
		content = parsedResult['00:00:00:00:00:00:00:01']
		if content is None:
			return True
		elif  "TestFlow" in content:
	   		return False
		else:
	   		return True
		
	# Events
	#1	
	def EnableFirewall(self):
		command = "http://%s:8080/wm/firewall/module/enable/json" % self.controllerIp
	  	urllib.urlopen(command)	
		# sleep to time out previous flows in switches
	  	#time.sleep(5)	
	#2	
	def DisableFirewall(self):
		command = "http://%s:8080/wm/firewall/module/disable/json" % self.controllerIp
	  	urllib.urlopen(command)	
		
	#6
	def CleanUpFirewallRules(self):
		# cleanup all Firewall rules
		command = "http://%s:8080/wm/firewall/rules/json" % self.controllerIp
		x = urllib.urlopen(command).read()
		parsedResult = json.loads(x)
		for i in range(len(parsedResult)):
			params = "{\"ruleid\":\"%s\"}" % parsedResult[i]['ruleid']
			command = "/wm/firewall/rules/json"
			url = "%s:8080" % self.controllerIp
			connection =  httplib.HTTPConnection(url)
			connection.request("DELETE", command, params)
			connection.getresponse()	
			
	#10
	def DeleteFlow(self):
		command = "http://%s:8080/wm/staticflowentrypusher/clear/%s/json" % (self.controllerIp, self.switch)
		urllib.urlopen(command).read()	
	
	