//Test code generated by ISTA

#include <iostream>
#include <string>
#include <vector>

#include "Block.hpp"

using namespace std;



class BlockTester_RT{

	Block block;
	
	void setUp() {
		block =  Block();
		block.(*block.getClears()).push_back("B3");
		block.(*block.getClears()).push_back("B6");
		block.(*block.getOntables()).push_back("B3");
		block.(*block.getOntables()).push_back("B6");
	}
	
	void setUp2() {
		block =  Block();
		block.(*block.getClears()).push_back("B1");
		block.(*block.getClears()).push_back("B6");
		block.(*block.getOns()).push_back(ON("B1", "B3"));
		block.(*block.getOntables()).push_back("B3");
		block.(*block.getOntables()).push_back("B6");
	}
	
	void setUp3() {
		block =  Block();
		block.(*block.getClears()).push_back("B2");
		block.(*block.getClears()).push_back("B5");
		block.(*block.getOns()).push_back(ON("B2", "B3"));
		block.(*block.getOns()).push_back(ON("B5", "B6"));
		block.(*block.getOntables()).push_back("B3");
		block.(*block.getOntables()).push_back("B6");
	}
	
	void assert(bool condition, string errorMessage) {
		if (!condition) {
			cout << "\n" << errorMessage << "\n\n";
			system("PAUSE");
			exit(1);
		}
	}

	void test1() {
		cout << "Test case 1" <<"\n";
		setUp();
		block.pickup("B3");
		assert(block.isClear("B6"), "1_1");
		assert(block.isHolding("B3"), "1_1");
		assert(block.isOntable("B6"), "1_1");
		block.putdown("B3");
		assert(block.isClear("B3"), "1_1_1");
		assert(block.isClear("B6"), "1_1_1");
		assert(block.isOntable("B3"), "1_1_1");
		assert(block.isOntable("B6"), "1_1_1");
	}

	void test2() {
		cout << "Test case 2" <<"\n";
		setUp();
		block.pickup("B3");
		block.stack("B3", "B6");
		assert(block.isClear("B3"), "1_1_2");
		assert(block.isOn("B3", "B6"), "1_1_2");
		assert(block.isOntable("B6"), "1_1_2");
		block.unstack("B3", "B6");
		assert(block.isClear("B6"), "1_1_2_1");
		assert(block.isHolding("B3"), "1_1_2_1");
		assert(block.isOntable("B6"), "1_1_2_1");
	}

	void test3() {
		cout << "Test case 3" <<"\n";
		setUp();
		block.pickup("B6");
		assert(block.isClear("B3"), "1_2");
		assert(block.isHolding("B6"), "1_2");
		assert(block.isOntable("B3"), "1_2");
		block.putdown("B6");
		assert(block.isClear("B3"), "1_2_1");
		assert(block.isClear("B6"), "1_2_1");
		assert(block.isOntable("B3"), "1_2_1");
		assert(block.isOntable("B6"), "1_2_1");
	}

	void test4() {
		cout << "Test case 4" <<"\n";
		setUp();
		block.pickup("B6");
		block.stack("B6", "B3");
		assert(block.isClear("B6"), "1_2_2");
		assert(block.isOn("B6", "B3"), "1_2_2");
		assert(block.isOntable("B3"), "1_2_2");
		block.unstack("B6", "B3");
		assert(block.isClear("B3"), "1_2_2_1");
		assert(block.isHolding("B6"), "1_2_2_1");
		assert(block.isOntable("B3"), "1_2_2_1");
	}

	void test5() {
		cout << "Test case 5" <<"\n";
		setUp2();
		block.pickup("B6");
		assert(block.isClear("B1"), "2_1");
		assert(block.isHolding("B6"), "2_1");
		assert(block.isOn("B1", "B3"), "2_1");
		assert(block.isOntable("B3"), "2_1");
		block.putdown("B6");
		assert(block.isClear("B1"), "2_1_1");
		assert(block.isClear("B6"), "2_1_1");
		assert(block.isOn("B1", "B3"), "2_1_1");
		assert(block.isOntable("B3"), "2_1_1");
		assert(block.isOntable("B6"), "2_1_1");
	}

	void test6() {
		cout << "Test case 6" <<"\n";
		setUp2();
		block.pickup("B6");
		block.stack("B6", "B1");
		assert(block.isClear("B6"), "2_1_2");
		assert(block.isOn("B1", "B3"), "2_1_2");
		assert(block.isOn("B6", "B1"), "2_1_2");
		assert(block.isOntable("B3"), "2_1_2");
		block.unstack("B6", "B1");
		assert(block.isClear("B1"), "2_1_2_1");
		assert(block.isHolding("B6"), "2_1_2_1");
		assert(block.isOn("B1", "B3"), "2_1_2_1");
		assert(block.isOntable("B3"), "2_1_2_1");
	}

	void test7() {
		cout << "Test case 7" <<"\n";
		setUp2();
		block.unstack("B1", "B3");
		assert(block.isClear("B3"), "2_2");
		assert(block.isClear("B6"), "2_2");
		assert(block.isHolding("B1"), "2_2");
		assert(block.isOntable("B3"), "2_2");
		assert(block.isOntable("B6"), "2_2");
		block.putdown("B1");
		assert(block.isClear("B1"), "2_2_1");
		assert(block.isClear("B3"), "2_2_1");
		assert(block.isClear("B6"), "2_2_1");
		assert(block.isOntable("B1"), "2_2_1");
		assert(block.isOntable("B3"), "2_2_1");
		assert(block.isOntable("B6"), "2_2_1");
		block.pickup("B1");
		assert(block.isClear("B3"), "2_2_1_1");
		assert(block.isClear("B6"), "2_2_1_1");
		assert(block.isHolding("B1"), "2_2_1_1");
		assert(block.isOntable("B3"), "2_2_1_1");
		assert(block.isOntable("B6"), "2_2_1_1");
	}

	void test8() {
		cout << "Test case 8" <<"\n";
		setUp2();
		block.unstack("B1", "B3");
		block.putdown("B1");
		block.pickup("B3");
		assert(block.isClear("B1"), "2_2_1_2");
		assert(block.isClear("B6"), "2_2_1_2");
		assert(block.isHolding("B3"), "2_2_1_2");
		assert(block.isOntable("B1"), "2_2_1_2");
		assert(block.isOntable("B6"), "2_2_1_2");
		block.putdown("B3");
		assert(block.isClear("B1"), "2_2_1_2_1");
		assert(block.isClear("B3"), "2_2_1_2_1");
		assert(block.isClear("B6"), "2_2_1_2_1");
		assert(block.isOntable("B1"), "2_2_1_2_1");
		assert(block.isOntable("B3"), "2_2_1_2_1");
		assert(block.isOntable("B6"), "2_2_1_2_1");
	}

	void test9() {
		cout << "Test case 9" <<"\n";
		setUp2();
		block.unstack("B1", "B3");
		block.putdown("B1");
		block.pickup("B3");
		block.stack("B3", "B1");
		assert(block.isClear("B3"), "2_2_1_2_2");
		assert(block.isClear("B6"), "2_2_1_2_2");
		assert(block.isOn("B3", "B1"), "2_2_1_2_2");
		assert(block.isOntable("B1"), "2_2_1_2_2");
		assert(block.isOntable("B6"), "2_2_1_2_2");
		block.pickup("B6");
		assert(block.isClear("B3"), "2_2_1_2_2_1");
		assert(block.isHolding("B6"), "2_2_1_2_2_1");
		assert(block.isOn("B3", "B1"), "2_2_1_2_2_1");
		assert(block.isOntable("B1"), "2_2_1_2_2_1");
		block.putdown("B6");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B3", "B1"), "");
		assert(block.isOntable("B1"), "");
		assert(block.isOntable("B6"), "");
	}

	void test10() {
		cout << "Test case 10" <<"\n";
		setUp2();
		block.unstack("B1", "B3");
		block.putdown("B1");
		block.pickup("B3");
		block.stack("B3", "B1");
		block.pickup("B6");
		block.stack("B6", "B3");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B3", "B1"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B1"), "");
		block.unstack("B6", "B3");
		assert(block.isClear("B3"), "");
		assert(block.isHolding("B6"), "");
		assert(block.isOn("B3", "B1"), "");
		assert(block.isOntable("B1"), "");
	}

	void test11() {
		cout << "Test case 11" <<"\n";
		setUp2();
		block.unstack("B1", "B3");
		block.putdown("B1");
		block.pickup("B3");
		block.stack("B3", "B1");
		block.unstack("B3", "B1");
		assert(block.isClear("B1"), "2_2_1_2_2_2");
		assert(block.isClear("B6"), "2_2_1_2_2_2");
		assert(block.isHolding("B3"), "2_2_1_2_2_2");
		assert(block.isOntable("B1"), "2_2_1_2_2_2");
		assert(block.isOntable("B6"), "2_2_1_2_2_2");
	}

	void test12() {
		cout << "Test case 12" <<"\n";
		setUp2();
		block.unstack("B1", "B3");
		block.putdown("B1");
		block.pickup("B3");
		block.stack("B3", "B6");
		assert(block.isClear("B1"), "2_2_1_2_3");
		assert(block.isClear("B3"), "2_2_1_2_3");
		assert(block.isOn("B3", "B6"), "2_2_1_2_3");
		assert(block.isOntable("B1"), "2_2_1_2_3");
		assert(block.isOntable("B6"), "2_2_1_2_3");
		block.pickup("B1");
		assert(block.isClear("B3"), "2_2_1_2_3_1");
		assert(block.isHolding("B1"), "2_2_1_2_3_1");
		assert(block.isOn("B3", "B6"), "2_2_1_2_3_1");
		assert(block.isOntable("B6"), "2_2_1_2_3_1");
		block.putdown("B1");
		assert(block.isClear("B1"), "");
		assert(block.isClear("B3"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOntable("B1"), "");
		assert(block.isOntable("B6"), "");
	}

	void test13() {
		cout << "Test case 13" <<"\n";
		setUp2();
		block.unstack("B1", "B3");
		block.putdown("B1");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B1");
		block.stack("B1", "B3");
		assert(block.isClear("B1"), "");
		assert(block.isOn("B1", "B3"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOntable("B6"), "");
		block.unstack("B1", "B3");
		assert(block.isClear("B3"), "");
		assert(block.isHolding("B1"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOntable("B6"), "");
	}

	void test14() {
		cout << "Test case 14" <<"\n";
		setUp2();
		block.unstack("B1", "B3");
		block.putdown("B1");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.unstack("B3", "B6");
		assert(block.isClear("B1"), "2_2_1_2_3_2");
		assert(block.isClear("B6"), "2_2_1_2_3_2");
		assert(block.isHolding("B3"), "2_2_1_2_3_2");
		assert(block.isOntable("B1"), "2_2_1_2_3_2");
		assert(block.isOntable("B6"), "2_2_1_2_3_2");
	}

	void test15() {
		cout << "Test case 15" <<"\n";
		setUp2();
		block.unstack("B1", "B3");
		block.putdown("B1");
		block.pickup("B6");
		assert(block.isClear("B1"), "2_2_1_3");
		assert(block.isClear("B3"), "2_2_1_3");
		assert(block.isHolding("B6"), "2_2_1_3");
		assert(block.isOntable("B1"), "2_2_1_3");
		assert(block.isOntable("B3"), "2_2_1_3");
		block.putdown("B6");
		assert(block.isClear("B1"), "2_2_1_3_1");
		assert(block.isClear("B3"), "2_2_1_3_1");
		assert(block.isClear("B6"), "2_2_1_3_1");
		assert(block.isOntable("B1"), "2_2_1_3_1");
		assert(block.isOntable("B3"), "2_2_1_3_1");
		assert(block.isOntable("B6"), "2_2_1_3_1");
	}

	void test16() {
		cout << "Test case 16" <<"\n";
		setUp2();
		block.unstack("B1", "B3");
		block.putdown("B1");
		block.pickup("B6");
		block.stack("B6", "B1");
		assert(block.isClear("B3"), "2_2_1_3_2");
		assert(block.isClear("B6"), "2_2_1_3_2");
		assert(block.isOn("B6", "B1"), "2_2_1_3_2");
		assert(block.isOntable("B1"), "2_2_1_3_2");
		assert(block.isOntable("B3"), "2_2_1_3_2");
		block.pickup("B3");
		assert(block.isClear("B6"), "2_2_1_3_2_1");
		assert(block.isHolding("B3"), "2_2_1_3_2_1");
		assert(block.isOn("B6", "B1"), "2_2_1_3_2_1");
		assert(block.isOntable("B1"), "2_2_1_3_2_1");
		block.putdown("B3");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B6", "B1"), "");
		assert(block.isOntable("B1"), "");
		assert(block.isOntable("B3"), "");
	}

	void test17() {
		cout << "Test case 17" <<"\n";
		setUp2();
		block.unstack("B1", "B3");
		block.putdown("B1");
		block.pickup("B6");
		block.stack("B6", "B1");
		block.pickup("B3");
		block.stack("B3", "B6");
		assert(block.isClear("B3"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOn("B6", "B1"), "");
		assert(block.isOntable("B1"), "");
		block.unstack("B3", "B6");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B3"), "");
		assert(block.isOn("B6", "B1"), "");
		assert(block.isOntable("B1"), "");
	}

	void test18() {
		cout << "Test case 18" <<"\n";
		setUp2();
		block.unstack("B1", "B3");
		block.putdown("B1");
		block.pickup("B6");
		block.stack("B6", "B1");
		block.unstack("B6", "B1");
		assert(block.isClear("B1"), "2_2_1_3_2_2");
		assert(block.isClear("B3"), "2_2_1_3_2_2");
		assert(block.isHolding("B6"), "2_2_1_3_2_2");
		assert(block.isOntable("B1"), "2_2_1_3_2_2");
		assert(block.isOntable("B3"), "2_2_1_3_2_2");
	}

	void test19() {
		cout << "Test case 19" <<"\n";
		setUp2();
		block.unstack("B1", "B3");
		block.putdown("B1");
		block.pickup("B6");
		block.stack("B6", "B3");
		assert(block.isClear("B1"), "2_2_1_3_3");
		assert(block.isClear("B6"), "2_2_1_3_3");
		assert(block.isOn("B6", "B3"), "2_2_1_3_3");
		assert(block.isOntable("B1"), "2_2_1_3_3");
		assert(block.isOntable("B3"), "2_2_1_3_3");
		block.pickup("B1");
		assert(block.isClear("B6"), "2_2_1_3_3_1");
		assert(block.isHolding("B1"), "2_2_1_3_3_1");
		assert(block.isOn("B6", "B3"), "2_2_1_3_3_1");
		assert(block.isOntable("B3"), "2_2_1_3_3_1");
		block.putdown("B1");
		assert(block.isClear("B1"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B1"), "");
		assert(block.isOntable("B3"), "");
	}

	void test20() {
		cout << "Test case 20" <<"\n";
		setUp2();
		block.unstack("B1", "B3");
		block.putdown("B1");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B1");
		block.stack("B1", "B6");
		assert(block.isClear("B1"), "");
		assert(block.isOn("B1", "B6"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B3"), "");
		block.unstack("B1", "B6");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B1"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B3"), "");
	}

	void test21() {
		cout << "Test case 21" <<"\n";
		setUp2();
		block.unstack("B1", "B3");
		block.putdown("B1");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.unstack("B6", "B3");
		assert(block.isClear("B1"), "2_2_1_3_3_2");
		assert(block.isClear("B3"), "2_2_1_3_3_2");
		assert(block.isHolding("B6"), "2_2_1_3_3_2");
		assert(block.isOntable("B1"), "2_2_1_3_3_2");
		assert(block.isOntable("B3"), "2_2_1_3_3_2");
	}

	void test22() {
		cout << "Test case 22" <<"\n";
		setUp2();
		block.unstack("B1", "B3");
		block.stack("B1", "B3");
		assert(block.isClear("B1"), "2_2_2");
		assert(block.isClear("B6"), "2_2_2");
		assert(block.isOn("B1", "B3"), "2_2_2");
		assert(block.isOntable("B3"), "2_2_2");
		assert(block.isOntable("B6"), "2_2_2");
	}

	void test23() {
		cout << "Test case 23" <<"\n";
		setUp2();
		block.unstack("B1", "B3");
		block.stack("B1", "B6");
		assert(block.isClear("B1"), "2_2_3");
		assert(block.isClear("B3"), "2_2_3");
		assert(block.isOn("B1", "B6"), "2_2_3");
		assert(block.isOntable("B3"), "2_2_3");
		assert(block.isOntable("B6"), "2_2_3");
		block.pickup("B3");
		assert(block.isClear("B1"), "2_2_3_1");
		assert(block.isHolding("B3"), "2_2_3_1");
		assert(block.isOn("B1", "B6"), "2_2_3_1");
		assert(block.isOntable("B6"), "2_2_3_1");
		block.putdown("B3");
		assert(block.isClear("B1"), "2_2_3_1_1");
		assert(block.isClear("B3"), "2_2_3_1_1");
		assert(block.isOn("B1", "B6"), "2_2_3_1_1");
		assert(block.isOntable("B3"), "2_2_3_1_1");
		assert(block.isOntable("B6"), "2_2_3_1_1");
	}

	void test24() {
		cout << "Test case 24" <<"\n";
		setUp2();
		block.unstack("B1", "B3");
		block.stack("B1", "B6");
		block.pickup("B3");
		block.stack("B3", "B1");
		assert(block.isClear("B3"), "2_2_3_1_2");
		assert(block.isOn("B1", "B6"), "2_2_3_1_2");
		assert(block.isOn("B3", "B1"), "2_2_3_1_2");
		assert(block.isOntable("B6"), "2_2_3_1_2");
		block.unstack("B3", "B1");
		assert(block.isClear("B1"), "2_2_3_1_2_1");
		assert(block.isHolding("B3"), "2_2_3_1_2_1");
		assert(block.isOn("B1", "B6"), "2_2_3_1_2_1");
		assert(block.isOntable("B6"), "2_2_3_1_2_1");
	}

	void test25() {
		cout << "Test case 25" <<"\n";
		setUp2();
		block.unstack("B1", "B3");
		block.stack("B1", "B6");
		block.unstack("B1", "B6");
		assert(block.isClear("B3"), "2_2_3_2");
		assert(block.isClear("B6"), "2_2_3_2");
		assert(block.isHolding("B1"), "2_2_3_2");
		assert(block.isOntable("B3"), "2_2_3_2");
		assert(block.isOntable("B6"), "2_2_3_2");
	}

	void test26() {
		cout << "Test case 26" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		assert(block.isClear("B3"), "3_1");
		assert(block.isClear("B5"), "3_1");
		assert(block.isHolding("B2"), "3_1");
		assert(block.isOn("B5", "B6"), "3_1");
		assert(block.isOntable("B3"), "3_1");
		assert(block.isOntable("B6"), "3_1");
		block.putdown("B2");
		assert(block.isClear("B2"), "3_1_1");
		assert(block.isClear("B3"), "3_1_1");
		assert(block.isClear("B5"), "3_1_1");
		assert(block.isOn("B5", "B6"), "3_1_1");
		assert(block.isOntable("B2"), "3_1_1");
		assert(block.isOntable("B3"), "3_1_1");
		assert(block.isOntable("B6"), "3_1_1");
		block.pickup("B2");
		assert(block.isClear("B3"), "3_1_1_1");
		assert(block.isClear("B5"), "3_1_1_1");
		assert(block.isHolding("B2"), "3_1_1_1");
		assert(block.isOn("B5", "B6"), "3_1_1_1");
		assert(block.isOntable("B3"), "3_1_1_1");
		assert(block.isOntable("B6"), "3_1_1_1");
	}

	void test27() {
		cout << "Test case 27" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		assert(block.isClear("B2"), "3_1_1_2");
		assert(block.isClear("B5"), "3_1_1_2");
		assert(block.isHolding("B3"), "3_1_1_2");
		assert(block.isOn("B5", "B6"), "3_1_1_2");
		assert(block.isOntable("B2"), "3_1_1_2");
		assert(block.isOntable("B6"), "3_1_1_2");
		block.putdown("B3");
		assert(block.isClear("B2"), "3_1_1_2_1");
		assert(block.isClear("B3"), "3_1_1_2_1");
		assert(block.isClear("B5"), "3_1_1_2_1");
		assert(block.isOn("B5", "B6"), "3_1_1_2_1");
		assert(block.isOntable("B2"), "3_1_1_2_1");
		assert(block.isOntable("B3"), "3_1_1_2_1");
		assert(block.isOntable("B6"), "3_1_1_2_1");
	}

	void test28() {
		cout << "Test case 28" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		assert(block.isClear("B3"), "3_1_1_2_2");
		assert(block.isClear("B5"), "3_1_1_2_2");
		assert(block.isOn("B3", "B2"), "3_1_1_2_2");
		assert(block.isOn("B5", "B6"), "3_1_1_2_2");
		assert(block.isOntable("B2"), "3_1_1_2_2");
		assert(block.isOntable("B6"), "3_1_1_2_2");
		block.unstack("B3", "B2");
		assert(block.isClear("B2"), "3_1_1_2_2_1");
		assert(block.isClear("B5"), "3_1_1_2_2_1");
		assert(block.isHolding("B3"), "3_1_1_2_2_1");
		assert(block.isOn("B5", "B6"), "3_1_1_2_2_1");
		assert(block.isOntable("B2"), "3_1_1_2_2_1");
		assert(block.isOntable("B6"), "3_1_1_2_2_1");
	}

	void test29() {
		cout << "Test case 29" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		assert(block.isClear("B3"), "3_1_1_2_2_2");
		assert(block.isClear("B6"), "3_1_1_2_2_2");
		assert(block.isHolding("B5"), "3_1_1_2_2_2");
		assert(block.isOn("B3", "B2"), "3_1_1_2_2_2");
		assert(block.isOntable("B2"), "3_1_1_2_2_2");
		assert(block.isOntable("B6"), "3_1_1_2_2_2");
		block.putdown("B5");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B3", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
		block.pickup("B5");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B5"), "");
		assert(block.isOn("B3", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B6"), "");
	}

	void test30() {
		cout << "Test case 30" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isHolding("B6"), "");
		assert(block.isOn("B3", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
		block.putdown("B6");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B3", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
	}

	void test31() {
		cout << "Test case 31" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B3", "B2"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
		block.pickup("B5");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B5"), "");
		assert(block.isOn("B3", "B2"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B2"), "");
		block.putdown("B5");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B3", "B2"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
	}

	void test32() {
		cout << "Test case 32" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B5");
		block.stack("B5", "B6");
		assert(block.isClear("B5"), "");
		assert(block.isOn("B3", "B2"), "");
		assert(block.isOn("B5", "B6"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B2"), "");
		block.unstack("B5", "B6");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B5"), "");
		assert(block.isOn("B3", "B2"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B2"), "");
	}

	void test33() {
		cout << "Test case 33" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.unstack("B6", "B3");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isHolding("B6"), "");
		assert(block.isOn("B3", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
	}

	void test34() {
		cout << "Test case 34" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B3", "B2"), "");
		assert(block.isOn("B6", "B5"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
		block.unstack("B3", "B2");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B3"), "");
		assert(block.isOn("B6", "B5"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
	}

	void test35() {
		cout << "Test case 35" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.unstack("B6", "B5");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isHolding("B6"), "");
		assert(block.isOn("B3", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
	}

	void test36() {
		cout << "Test case 36" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B3", "B2");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B3"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
	}

	void test37() {
		cout << "Test case 37" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B3", "B2"), "");
		assert(block.isOn("B5", "B3"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B6"), "");
		block.pickup("B6");
		assert(block.isClear("B5"), "");
		assert(block.isHolding("B6"), "");
		assert(block.isOn("B3", "B2"), "");
		assert(block.isOn("B5", "B3"), "");
		assert(block.isOntable("B2"), "");
		block.putdown("B6");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B3", "B2"), "");
		assert(block.isOn("B5", "B3"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B6"), "");
	}

	void test38() {
		cout << "Test case 38" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B6");
		block.stack("B6", "B5");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B3", "B2"), "");
		assert(block.isOn("B5", "B3"), "");
		assert(block.isOn("B6", "B5"), "");
		assert(block.isOntable("B2"), "");
		block.unstack("B6", "B5");
		assert(block.isClear("B5"), "");
		assert(block.isHolding("B6"), "");
		assert(block.isOn("B3", "B2"), "");
		assert(block.isOn("B5", "B3"), "");
		assert(block.isOntable("B2"), "");
	}

	void test39() {
		cout << "Test case 39" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.unstack("B5", "B3");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B5"), "");
		assert(block.isOn("B3", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B6"), "");
	}

	void test40() {
		cout << "Test case 40" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B6");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isOn("B3", "B2"), "");
		assert(block.isOn("B5", "B6"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B6"), "");
	}

	void test41() {
		cout << "Test case 41" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B5");
		assert(block.isClear("B2"), "3_1_1_2_3");
		assert(block.isClear("B3"), "3_1_1_2_3");
		assert(block.isOn("B3", "B5"), "3_1_1_2_3");
		assert(block.isOn("B5", "B6"), "3_1_1_2_3");
		assert(block.isOntable("B2"), "3_1_1_2_3");
		assert(block.isOntable("B6"), "3_1_1_2_3");
		block.pickup("B2");
		assert(block.isClear("B3"), "3_1_1_2_3_1");
		assert(block.isHolding("B2"), "3_1_1_2_3_1");
		assert(block.isOn("B3", "B5"), "3_1_1_2_3_1");
		assert(block.isOn("B5", "B6"), "3_1_1_2_3_1");
		assert(block.isOntable("B6"), "3_1_1_2_3_1");
		block.putdown("B2");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isOn("B3", "B5"), "");
		assert(block.isOn("B5", "B6"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B6"), "");
	}

	void test42() {
		cout << "Test case 42" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B2");
		block.stack("B2", "B3");
		assert(block.isClear("B2"), "");
		assert(block.isOn("B2", "B3"), "");
		assert(block.isOn("B3", "B5"), "");
		assert(block.isOn("B5", "B6"), "");
		assert(block.isOntable("B6"), "");
		block.unstack("B2", "B3");
		assert(block.isClear("B3"), "");
		assert(block.isHolding("B2"), "");
		assert(block.isOn("B3", "B5"), "");
		assert(block.isOn("B5", "B6"), "");
		assert(block.isOntable("B6"), "");
	}

	void test43() {
		cout << "Test case 43" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.unstack("B3", "B5");
		assert(block.isClear("B2"), "3_1_1_2_3_2");
		assert(block.isClear("B5"), "3_1_1_2_3_2");
		assert(block.isHolding("B3"), "3_1_1_2_3_2");
		assert(block.isOn("B5", "B6"), "3_1_1_2_3_2");
		assert(block.isOntable("B2"), "3_1_1_2_3_2");
		assert(block.isOntable("B6"), "3_1_1_2_3_2");
	}

	void test44() {
		cout << "Test case 44" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		assert(block.isClear("B2"), "3_1_1_3");
		assert(block.isClear("B3"), "3_1_1_3");
		assert(block.isClear("B6"), "3_1_1_3");
		assert(block.isHolding("B5"), "3_1_1_3");
		assert(block.isOntable("B2"), "3_1_1_3");
		assert(block.isOntable("B3"), "3_1_1_3");
		assert(block.isOntable("B6"), "3_1_1_3");
		block.putdown("B5");
		assert(block.isClear("B2"), "3_1_1_3_1");
		assert(block.isClear("B3"), "3_1_1_3_1");
		assert(block.isClear("B5"), "3_1_1_3_1");
		assert(block.isClear("B6"), "3_1_1_3_1");
		assert(block.isOntable("B2"), "3_1_1_3_1");
		assert(block.isOntable("B3"), "3_1_1_3_1");
		assert(block.isOntable("B5"), "3_1_1_3_1");
		assert(block.isOntable("B6"), "3_1_1_3_1");
		block.pickup("B2");
		assert(block.isClear("B3"), "3_1_1_3_1_1");
		assert(block.isClear("B5"), "3_1_1_3_1_1");
		assert(block.isClear("B6"), "3_1_1_3_1_1");
		assert(block.isHolding("B2"), "3_1_1_3_1_1");
		assert(block.isOntable("B3"), "3_1_1_3_1_1");
		assert(block.isOntable("B5"), "3_1_1_3_1_1");
		assert(block.isOntable("B6"), "3_1_1_3_1_1");
	}

	void test45() {
		cout << "Test case 45" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		assert(block.isClear("B2"), "3_1_1_3_1_2");
		assert(block.isClear("B5"), "3_1_1_3_1_2");
		assert(block.isClear("B6"), "3_1_1_3_1_2");
		assert(block.isHolding("B3"), "3_1_1_3_1_2");
		assert(block.isOntable("B2"), "3_1_1_3_1_2");
		assert(block.isOntable("B5"), "3_1_1_3_1_2");
		assert(block.isOntable("B6"), "3_1_1_3_1_2");
		block.putdown("B3");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
	}

	void test46() {
		cout << "Test case 46" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B2");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B3", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
	}

	void test47() {
		cout << "Test case 47" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B3", "B5"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
		block.pickup("B2");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B2"), "");
		assert(block.isOn("B3", "B5"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
		block.putdown("B2");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B3", "B5"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
	}

	void test48() {
		cout << "Test case 48" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B2");
		block.stack("B2", "B3");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B2", "B3"), "");
		assert(block.isOn("B3", "B5"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
		block.pickup("B6");
		assert(block.isClear("B2"), "");
		assert(block.isHolding("B6"), "");
		assert(block.isOn("B2", "B3"), "");
		assert(block.isOn("B3", "B5"), "");
		assert(block.isOntable("B5"), "");
		block.putdown("B6");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B2", "B3"), "");
		assert(block.isOn("B3", "B5"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
	}

	void test49() {
		cout << "Test case 49" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B2");
		block.stack("B2", "B3");
		block.pickup("B6");
		block.stack("B6", "B2");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B2", "B3"), "");
		assert(block.isOn("B3", "B5"), "");
		assert(block.isOn("B6", "B2"), "");
		assert(block.isOntable("B5"), "");
		block.unstack("B6", "B2");
		assert(block.isClear("B2"), "");
		assert(block.isHolding("B6"), "");
		assert(block.isOn("B2", "B3"), "");
		assert(block.isOn("B3", "B5"), "");
		assert(block.isOntable("B5"), "");
	}

	void test50() {
		cout << "Test case 50" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B2");
		block.stack("B2", "B3");
		block.unstack("B2", "B3");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B2"), "");
		assert(block.isOn("B3", "B5"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
	}

	void test51() {
		cout << "Test case 51" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B2");
		block.stack("B2", "B6");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isOn("B2", "B6"), "");
		assert(block.isOn("B3", "B5"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
	}

	void test52() {
		cout << "Test case 52" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B6");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isHolding("B6"), "");
		assert(block.isOn("B3", "B5"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
		block.putdown("B6");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B3", "B5"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
	}

	void test53() {
		cout << "Test case 53" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B3", "B5"), "");
		assert(block.isOn("B6", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
		block.unstack("B3", "B5");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B3"), "");
		assert(block.isOn("B6", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
	}

	void test54() {
		cout << "Test case 54" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.unstack("B6", "B2");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isHolding("B6"), "");
		assert(block.isOn("B3", "B5"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
	}

	void test55() {
		cout << "Test case 55" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B3", "B5"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
		block.pickup("B2");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B2"), "");
		assert(block.isOn("B3", "B5"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B5"), "");
		block.putdown("B2");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B3", "B5"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
	}

	void test56() {
		cout << "Test case 56" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B2");
		block.stack("B2", "B6");
		assert(block.isClear("B2"), "");
		assert(block.isOn("B2", "B6"), "");
		assert(block.isOn("B3", "B5"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B5"), "");
		block.unstack("B2", "B6");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B2"), "");
		assert(block.isOn("B3", "B5"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B5"), "");
	}

	void test57() {
		cout << "Test case 57" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.unstack("B6", "B3");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isHolding("B6"), "");
		assert(block.isOn("B3", "B5"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
	}

	void test58() {
		cout << "Test case 58" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.unstack("B3", "B5");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B3"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
	}

	void test59() {
		cout << "Test case 59" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
		block.pickup("B2");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isHolding("B2"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
		block.putdown("B2");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
	}

	void test60() {
		cout << "Test case 60" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B2");
		block.stack("B2", "B3");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B5"), "");
		assert(block.isOn("B2", "B3"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
		block.pickup("B5");
		assert(block.isClear("B2"), "");
		assert(block.isHolding("B5"), "");
		assert(block.isOn("B2", "B3"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOntable("B6"), "");
		block.putdown("B5");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B5"), "");
		assert(block.isOn("B2", "B3"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
	}

	void test61() {
		cout << "Test case 61" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B2");
		block.stack("B2", "B3");
		block.pickup("B5");
		block.stack("B5", "B2");
		assert(block.isClear("B5"), "");
		assert(block.isOn("B2", "B3"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOn("B5", "B2"), "");
		assert(block.isOntable("B6"), "");
		block.unstack("B5", "B2");
		assert(block.isClear("B2"), "");
		assert(block.isHolding("B5"), "");
		assert(block.isOn("B2", "B3"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOntable("B6"), "");
	}

	void test62() {
		cout << "Test case 62" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B2");
		block.stack("B2", "B3");
		block.unstack("B2", "B3");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isHolding("B2"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
	}

	void test63() {
		cout << "Test case 63" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B2");
		block.stack("B2", "B5");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isOn("B2", "B5"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
	}

	void test64() {
		cout << "Test case 64" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B5");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isHolding("B5"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B6"), "");
		block.putdown("B5");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
	}

	void test65() {
		cout << "Test case 65" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B5");
		block.stack("B5", "B2");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOn("B5", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B6"), "");
	}

	void test66() {
		cout << "Test case 66" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B5");
		block.stack("B5", "B3");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B5"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOn("B5", "B3"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B6"), "");
		block.pickup("B2");
		assert(block.isClear("B5"), "");
		assert(block.isHolding("B2"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOn("B5", "B3"), "");
		assert(block.isOntable("B6"), "");
		block.putdown("B2");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B5"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOn("B5", "B3"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B6"), "");
	}

	void test67() {
		cout << "Test case 67" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B5");
		block.stack("B5", "B3");
		block.pickup("B2");
		block.stack("B2", "B5");
		assert(block.isClear("B2"), "");
		assert(block.isOn("B2", "B5"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOn("B5", "B3"), "");
		assert(block.isOntable("B6"), "");
		block.unstack("B2", "B5");
		assert(block.isClear("B5"), "");
		assert(block.isHolding("B2"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOn("B5", "B3"), "");
		assert(block.isOntable("B6"), "");
	}

	void test68() {
		cout << "Test case 68" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B5");
		block.stack("B5", "B3");
		block.unstack("B5", "B3");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isHolding("B5"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B6"), "");
	}

	void test69() {
		cout << "Test case 69" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.unstack("B3", "B6");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B3"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
	}

	void test70() {
		cout << "Test case 70" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B5");
		assert(block.isClear("B2"), "3_1_1_3_1_3");
		assert(block.isClear("B3"), "3_1_1_3_1_3");
		assert(block.isClear("B6"), "3_1_1_3_1_3");
		assert(block.isHolding("B5"), "3_1_1_3_1_3");
		assert(block.isOntable("B2"), "3_1_1_3_1_3");
		assert(block.isOntable("B3"), "3_1_1_3_1_3");
		assert(block.isOntable("B6"), "3_1_1_3_1_3");
	}

	void test71() {
		cout << "Test case 71" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		assert(block.isClear("B2"), "3_1_1_3_1_4");
		assert(block.isClear("B3"), "3_1_1_3_1_4");
		assert(block.isClear("B5"), "3_1_1_3_1_4");
		assert(block.isHolding("B6"), "3_1_1_3_1_4");
		assert(block.isOntable("B2"), "3_1_1_3_1_4");
		assert(block.isOntable("B3"), "3_1_1_3_1_4");
		assert(block.isOntable("B5"), "3_1_1_3_1_4");
		block.putdown("B6");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
	}

	void test72() {
		cout << "Test case 72" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B6", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
		block.pickup("B3");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B3"), "");
		assert(block.isOn("B6", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
		block.putdown("B3");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B6", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
	}

	void test73() {
		cout << "Test case 73" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B3");
		block.stack("B3", "B5");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B3", "B5"), "");
		assert(block.isOn("B6", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
	}

	void test74() {
		cout << "Test case 74" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B3");
		block.stack("B3", "B6");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOn("B6", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
		block.pickup("B5");
		assert(block.isClear("B3"), "");
		assert(block.isHolding("B5"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOn("B6", "B2"), "");
		assert(block.isOntable("B2"), "");
		block.putdown("B5");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOn("B6", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
	}

	void test75() {
		cout << "Test case 75" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B5");
		block.stack("B5", "B3");
		assert(block.isClear("B5"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOn("B5", "B3"), "");
		assert(block.isOn("B6", "B2"), "");
		assert(block.isOntable("B2"), "");
		block.unstack("B5", "B3");
		assert(block.isClear("B3"), "");
		assert(block.isHolding("B5"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOn("B6", "B2"), "");
		assert(block.isOntable("B2"), "");
	}

	void test76() {
		cout << "Test case 76" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.unstack("B3", "B6");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B3"), "");
		assert(block.isOn("B6", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
	}

	void test77() {
		cout << "Test case 77" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B5");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B5"), "");
		assert(block.isOn("B6", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
		block.putdown("B5");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B6", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
	}

	void test78() {
		cout << "Test case 78" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B5");
		block.stack("B5", "B3");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B5", "B3"), "");
		assert(block.isOn("B6", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
	}

	void test79() {
		cout << "Test case 79" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B5");
		block.stack("B5", "B6");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isOn("B5", "B6"), "");
		assert(block.isOn("B6", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
		block.pickup("B3");
		assert(block.isClear("B5"), "");
		assert(block.isHolding("B3"), "");
		assert(block.isOn("B5", "B6"), "");
		assert(block.isOn("B6", "B2"), "");
		assert(block.isOntable("B2"), "");
		block.putdown("B3");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isOn("B5", "B6"), "");
		assert(block.isOn("B6", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
	}

	void test80() {
		cout << "Test case 80" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B5");
		block.stack("B5", "B6");
		block.pickup("B3");
		block.stack("B3", "B5");
		assert(block.isClear("B3"), "");
		assert(block.isOn("B3", "B5"), "");
		assert(block.isOn("B5", "B6"), "");
		assert(block.isOn("B6", "B2"), "");
		assert(block.isOntable("B2"), "");
		block.unstack("B3", "B5");
		assert(block.isClear("B5"), "");
		assert(block.isHolding("B3"), "");
		assert(block.isOn("B5", "B6"), "");
		assert(block.isOn("B6", "B2"), "");
		assert(block.isOntable("B2"), "");
	}

	void test81() {
		cout << "Test case 81" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B5");
		block.stack("B5", "B6");
		block.unstack("B5", "B6");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B5"), "");
		assert(block.isOn("B6", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
	}

	void test82() {
		cout << "Test case 82" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.unstack("B6", "B2");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isHolding("B6"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
	}

	void test83() {
		cout << "Test case 83" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
		block.pickup("B2");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B2"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
		block.putdown("B2");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
	}

	void test84() {
		cout << "Test case 84" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B2");
		block.stack("B2", "B5");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B2", "B5"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
	}

	void test85() {
		cout << "Test case 85" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B2");
		block.stack("B2", "B6");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B5"), "");
		assert(block.isOn("B2", "B6"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
		block.pickup("B5");
		assert(block.isClear("B2"), "");
		assert(block.isHolding("B5"), "");
		assert(block.isOn("B2", "B6"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B3"), "");
		block.putdown("B5");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B5"), "");
		assert(block.isOn("B2", "B6"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
	}

	void test86() {
		cout << "Test case 86" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B2");
		block.stack("B2", "B6");
		block.pickup("B5");
		block.stack("B5", "B2");
		assert(block.isClear("B5"), "");
		assert(block.isOn("B2", "B6"), "");
		assert(block.isOn("B5", "B2"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B3"), "");
		block.unstack("B5", "B2");
		assert(block.isClear("B2"), "");
		assert(block.isHolding("B5"), "");
		assert(block.isOn("B2", "B6"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B3"), "");
	}

	void test87() {
		cout << "Test case 87" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B2");
		block.stack("B2", "B6");
		block.unstack("B2", "B6");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B2"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
	}

	void test88() {
		cout << "Test case 88" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B5");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B5"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
		block.putdown("B5");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
	}

	void test89() {
		cout << "Test case 89" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B5");
		block.stack("B5", "B2");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B5", "B2"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
	}

	void test90() {
		cout << "Test case 90" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B5");
		block.stack("B5", "B6");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B5"), "");
		assert(block.isOn("B5", "B6"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
		block.pickup("B2");
		assert(block.isClear("B5"), "");
		assert(block.isHolding("B2"), "");
		assert(block.isOn("B5", "B6"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B3"), "");
		block.putdown("B2");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B5"), "");
		assert(block.isOn("B5", "B6"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
	}

	void test91() {
		cout << "Test case 91" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B5");
		block.stack("B5", "B6");
		block.pickup("B2");
		block.stack("B2", "B5");
		assert(block.isClear("B2"), "");
		assert(block.isOn("B2", "B5"), "");
		assert(block.isOn("B5", "B6"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B3"), "");
		block.unstack("B2", "B5");
		assert(block.isClear("B5"), "");
		assert(block.isHolding("B2"), "");
		assert(block.isOn("B5", "B6"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B3"), "");
	}

	void test92() {
		cout << "Test case 92" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B5");
		block.stack("B5", "B6");
		block.unstack("B5", "B6");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B5"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
	}

	void test93() {
		cout << "Test case 93" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.unstack("B6", "B3");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isHolding("B6"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
	}

	void test94() {
		cout << "Test case 94" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B6", "B5"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
		block.pickup("B2");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B2"), "");
		assert(block.isOn("B6", "B5"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
	}

	void test95() {
		cout << "Test case 95" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.pickup("B3");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B3"), "");
		assert(block.isOn("B6", "B5"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
		block.putdown("B3");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B6", "B5"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
	}

	void test96() {
		cout << "Test case 96" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.pickup("B3");
		block.stack("B3", "B2");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B3", "B2"), "");
		assert(block.isOn("B6", "B5"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
	}

	void test97() {
		cout << "Test case 97" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOn("B6", "B5"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
		block.pickup("B2");
		assert(block.isClear("B3"), "");
		assert(block.isHolding("B2"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOn("B6", "B5"), "");
		assert(block.isOntable("B5"), "");
		block.putdown("B2");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOn("B6", "B5"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
	}

	void test98() {
		cout << "Test case 98" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B2");
		block.stack("B2", "B3");
		assert(block.isClear("B2"), "");
		assert(block.isOn("B2", "B3"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOn("B6", "B5"), "");
		assert(block.isOntable("B5"), "");
		block.unstack("B2", "B3");
		assert(block.isClear("B3"), "");
		assert(block.isHolding("B2"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOn("B6", "B5"), "");
		assert(block.isOntable("B5"), "");
	}

	void test99() {
		cout << "Test case 99" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.unstack("B3", "B6");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B3"), "");
		assert(block.isOn("B6", "B5"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B5"), "");
	}

	void test100() {
		cout << "Test case 100" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.unstack("B6", "B5");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isHolding("B6"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
	}

	void test101() {
		cout << "Test case 101" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		assert(block.isClear("B3"), "3_1_1_3_2");
		assert(block.isClear("B5"), "3_1_1_3_2");
		assert(block.isClear("B6"), "3_1_1_3_2");
		assert(block.isOn("B5", "B2"), "3_1_1_3_2");
		assert(block.isOntable("B2"), "3_1_1_3_2");
		assert(block.isOntable("B3"), "3_1_1_3_2");
		assert(block.isOntable("B6"), "3_1_1_3_2");
		block.pickup("B3");
		assert(block.isClear("B5"), "3_1_1_3_2_1");
		assert(block.isClear("B6"), "3_1_1_3_2_1");
		assert(block.isHolding("B3"), "3_1_1_3_2_1");
		assert(block.isOn("B5", "B2"), "3_1_1_3_2_1");
		assert(block.isOntable("B2"), "3_1_1_3_2_1");
		assert(block.isOntable("B6"), "3_1_1_3_2_1");
		block.putdown("B3");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B5", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B6"), "");
	}

	void test102() {
		cout << "Test case 102" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B3");
		block.stack("B3", "B5");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B3", "B5"), "");
		assert(block.isOn("B5", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B6"), "");
		block.pickup("B6");
		assert(block.isClear("B3"), "");
		assert(block.isHolding("B6"), "");
		assert(block.isOn("B3", "B5"), "");
		assert(block.isOn("B5", "B2"), "");
		assert(block.isOntable("B2"), "");
		block.putdown("B6");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B3", "B5"), "");
		assert(block.isOn("B5", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B6"), "");
	}

	void test103() {
		cout << "Test case 103" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B3", "B5"), "");
		assert(block.isOn("B5", "B2"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B2"), "");
		block.unstack("B6", "B3");
		assert(block.isClear("B3"), "");
		assert(block.isHolding("B6"), "");
		assert(block.isOn("B3", "B5"), "");
		assert(block.isOn("B5", "B2"), "");
		assert(block.isOntable("B2"), "");
	}

	void test104() {
		cout << "Test case 104" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.unstack("B3", "B5");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B3"), "");
		assert(block.isOn("B5", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B6"), "");
	}

	void test105() {
		cout << "Test case 105" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B3");
		block.stack("B3", "B6");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOn("B5", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B6"), "");
		block.unstack("B3", "B6");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B3"), "");
		assert(block.isOn("B5", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B6"), "");
	}

	void test106() {
		cout << "Test case 106" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.unstack("B5", "B2");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isHolding("B5"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B6"), "");
	}

	void test107() {
		cout << "Test case 107" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B6");
		assert(block.isClear("B3"), "3_1_1_3_2_2");
		assert(block.isClear("B5"), "3_1_1_3_2_2");
		assert(block.isHolding("B6"), "3_1_1_3_2_2");
		assert(block.isOn("B5", "B2"), "3_1_1_3_2_2");
		assert(block.isOntable("B2"), "3_1_1_3_2_2");
		assert(block.isOntable("B3"), "3_1_1_3_2_2");
		block.putdown("B6");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B5", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B6"), "");
	}

	void test108() {
		cout << "Test case 108" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B6");
		block.stack("B6", "B3");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B5", "B2"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
		block.unstack("B5", "B2");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B5"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
	}

	void test109() {
		cout << "Test case 109" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.unstack("B6", "B3");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isHolding("B6"), "");
		assert(block.isOn("B5", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
	}

	void test110() {
		cout << "Test case 110" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B6");
		block.stack("B6", "B5");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B5", "B2"), "");
		assert(block.isOn("B6", "B5"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
		block.pickup("B3");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B3"), "");
		assert(block.isOn("B5", "B2"), "");
		assert(block.isOn("B6", "B5"), "");
		assert(block.isOntable("B2"), "");
		block.putdown("B3");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B5", "B2"), "");
		assert(block.isOn("B6", "B5"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
	}

	void test111() {
		cout << "Test case 111" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		assert(block.isClear("B3"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOn("B5", "B2"), "");
		assert(block.isOn("B6", "B5"), "");
		assert(block.isOntable("B2"), "");
		block.unstack("B3", "B6");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B3"), "");
		assert(block.isOn("B5", "B2"), "");
		assert(block.isOn("B6", "B5"), "");
		assert(block.isOntable("B2"), "");
	}

	void test112() {
		cout << "Test case 112" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.unstack("B6", "B5");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isHolding("B6"), "");
		assert(block.isOn("B5", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
	}

	void test113() {
		cout << "Test case 113" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.unstack("B5", "B2");
		assert(block.isClear("B2"), "3_1_1_3_2_3");
		assert(block.isClear("B3"), "3_1_1_3_2_3");
		assert(block.isClear("B6"), "3_1_1_3_2_3");
		assert(block.isHolding("B5"), "3_1_1_3_2_3");
		assert(block.isOntable("B2"), "3_1_1_3_2_3");
		assert(block.isOntable("B3"), "3_1_1_3_2_3");
		assert(block.isOntable("B6"), "3_1_1_3_2_3");
	}

	void test114() {
		cout << "Test case 114" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		assert(block.isClear("B2"), "3_1_1_3_3");
		assert(block.isClear("B5"), "3_1_1_3_3");
		assert(block.isClear("B6"), "3_1_1_3_3");
		assert(block.isOn("B5", "B3"), "3_1_1_3_3");
		assert(block.isOntable("B2"), "3_1_1_3_3");
		assert(block.isOntable("B3"), "3_1_1_3_3");
		assert(block.isOntable("B6"), "3_1_1_3_3");
		block.pickup("B2");
		assert(block.isClear("B5"), "3_1_1_3_3_1");
		assert(block.isClear("B6"), "3_1_1_3_3_1");
		assert(block.isHolding("B2"), "3_1_1_3_3_1");
		assert(block.isOn("B5", "B3"), "3_1_1_3_3_1");
		assert(block.isOntable("B3"), "3_1_1_3_3_1");
		assert(block.isOntable("B6"), "3_1_1_3_3_1");
		block.putdown("B2");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B5", "B3"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B6"), "");
	}

	void test115() {
		cout << "Test case 115" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B2");
		block.stack("B2", "B5");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B2", "B5"), "");
		assert(block.isOn("B5", "B3"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B6"), "");
		block.pickup("B6");
		assert(block.isClear("B2"), "");
		assert(block.isHolding("B6"), "");
		assert(block.isOn("B2", "B5"), "");
		assert(block.isOn("B5", "B3"), "");
		assert(block.isOntable("B3"), "");
		block.putdown("B6");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B2", "B5"), "");
		assert(block.isOn("B5", "B3"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B6"), "");
	}

	void test116() {
		cout << "Test case 116" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B2");
		block.stack("B2", "B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B2", "B5"), "");
		assert(block.isOn("B5", "B3"), "");
		assert(block.isOn("B6", "B2"), "");
		assert(block.isOntable("B3"), "");
		block.unstack("B6", "B2");
		assert(block.isClear("B2"), "");
		assert(block.isHolding("B6"), "");
		assert(block.isOn("B2", "B5"), "");
		assert(block.isOn("B5", "B3"), "");
		assert(block.isOntable("B3"), "");
	}

	void test117() {
		cout << "Test case 117" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B2");
		block.stack("B2", "B5");
		block.unstack("B2", "B5");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B2"), "");
		assert(block.isOn("B5", "B3"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B6"), "");
	}

	void test118() {
		cout << "Test case 118" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B2");
		block.stack("B2", "B6");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B5"), "");
		assert(block.isOn("B2", "B6"), "");
		assert(block.isOn("B5", "B3"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B6"), "");
		block.unstack("B2", "B6");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B2"), "");
		assert(block.isOn("B5", "B3"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B6"), "");
	}

	void test119() {
		cout << "Test case 119" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B2");
		block.stack("B2", "B6");
		block.unstack("B5", "B3");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isHolding("B5"), "");
		assert(block.isOn("B2", "B6"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B6"), "");
	}

	void test120() {
		cout << "Test case 120" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B6");
		assert(block.isClear("B2"), "3_1_1_3_3_2");
		assert(block.isClear("B5"), "3_1_1_3_3_2");
		assert(block.isHolding("B6"), "3_1_1_3_3_2");
		assert(block.isOn("B5", "B3"), "3_1_1_3_3_2");
		assert(block.isOntable("B2"), "3_1_1_3_3_2");
		assert(block.isOntable("B3"), "3_1_1_3_3_2");
		block.putdown("B6");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B5", "B3"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B6"), "");
	}

	void test121() {
		cout << "Test case 121" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B6");
		block.stack("B6", "B2");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B5", "B3"), "");
		assert(block.isOn("B6", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
		block.unstack("B5", "B3");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B5"), "");
		assert(block.isOn("B6", "B2"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
	}

	void test122() {
		cout << "Test case 122" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.unstack("B6", "B2");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B5"), "");
		assert(block.isHolding("B6"), "");
		assert(block.isOn("B5", "B3"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
	}

	void test123() {
		cout << "Test case 123" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B6");
		block.stack("B6", "B5");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B5", "B3"), "");
		assert(block.isOn("B6", "B5"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
		block.pickup("B2");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B2"), "");
		assert(block.isOn("B5", "B3"), "");
		assert(block.isOn("B6", "B5"), "");
		assert(block.isOntable("B3"), "");
		block.putdown("B2");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B5", "B3"), "");
		assert(block.isOn("B6", "B5"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
	}

	void test124() {
		cout << "Test case 124" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.pickup("B2");
		block.stack("B2", "B6");
		assert(block.isClear("B2"), "");
		assert(block.isOn("B2", "B6"), "");
		assert(block.isOn("B5", "B3"), "");
		assert(block.isOn("B6", "B5"), "");
		assert(block.isOntable("B3"), "");
		block.unstack("B2", "B6");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B2"), "");
		assert(block.isOn("B5", "B3"), "");
		assert(block.isOn("B6", "B5"), "");
		assert(block.isOntable("B3"), "");
	}

	void test125() {
		cout << "Test case 125" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.unstack("B6", "B5");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B5"), "");
		assert(block.isHolding("B6"), "");
		assert(block.isOn("B5", "B3"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
	}

	void test126() {
		cout << "Test case 126" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.unstack("B5", "B3");
		assert(block.isClear("B2"), "3_1_1_3_3_3");
		assert(block.isClear("B3"), "3_1_1_3_3_3");
		assert(block.isClear("B6"), "3_1_1_3_3_3");
		assert(block.isHolding("B5"), "3_1_1_3_3_3");
		assert(block.isOntable("B2"), "3_1_1_3_3_3");
		assert(block.isOntable("B3"), "3_1_1_3_3_3");
		assert(block.isOntable("B6"), "3_1_1_3_3_3");
	}

	void test127() {
		cout << "Test case 127" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B6");
		assert(block.isClear("B2"), "3_1_1_3_4");
		assert(block.isClear("B3"), "3_1_1_3_4");
		assert(block.isClear("B5"), "3_1_1_3_4");
		assert(block.isOn("B5", "B6"), "3_1_1_3_4");
		assert(block.isOntable("B2"), "3_1_1_3_4");
		assert(block.isOntable("B3"), "3_1_1_3_4");
		assert(block.isOntable("B6"), "3_1_1_3_4");
	}

	void test128() {
		cout << "Test case 128" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.stack("B2", "B3");
		assert(block.isClear("B2"), "3_1_2");
		assert(block.isClear("B5"), "3_1_2");
		assert(block.isOn("B2", "B3"), "3_1_2");
		assert(block.isOn("B5", "B6"), "3_1_2");
		assert(block.isOntable("B3"), "3_1_2");
		assert(block.isOntable("B6"), "3_1_2");
	}

	void test129() {
		cout << "Test case 129" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		assert(block.isClear("B2"), "3_1_3");
		assert(block.isClear("B3"), "3_1_3");
		assert(block.isOn("B2", "B5"), "3_1_3");
		assert(block.isOn("B5", "B6"), "3_1_3");
		assert(block.isOntable("B3"), "3_1_3");
		assert(block.isOntable("B6"), "3_1_3");
		block.pickup("B3");
		assert(block.isClear("B2"), "3_1_3_1");
		assert(block.isHolding("B3"), "3_1_3_1");
		assert(block.isOn("B2", "B5"), "3_1_3_1");
		assert(block.isOn("B5", "B6"), "3_1_3_1");
		assert(block.isOntable("B6"), "3_1_3_1");
		block.putdown("B3");
		assert(block.isClear("B2"), "3_1_3_1_1");
		assert(block.isClear("B3"), "3_1_3_1_1");
		assert(block.isOn("B2", "B5"), "3_1_3_1_1");
		assert(block.isOn("B5", "B6"), "3_1_3_1_1");
		assert(block.isOntable("B3"), "3_1_3_1_1");
		assert(block.isOntable("B6"), "3_1_3_1_1");
	}

	void test130() {
		cout << "Test case 130" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B3");
		block.stack("B3", "B2");
		assert(block.isClear("B3"), "3_1_3_1_2");
		assert(block.isOn("B2", "B5"), "3_1_3_1_2");
		assert(block.isOn("B3", "B2"), "3_1_3_1_2");
		assert(block.isOn("B5", "B6"), "3_1_3_1_2");
		assert(block.isOntable("B6"), "3_1_3_1_2");
		block.unstack("B3", "B2");
		assert(block.isClear("B2"), "3_1_3_1_2_1");
		assert(block.isHolding("B3"), "3_1_3_1_2_1");
		assert(block.isOn("B2", "B5"), "3_1_3_1_2_1");
		assert(block.isOn("B5", "B6"), "3_1_3_1_2_1");
		assert(block.isOntable("B6"), "3_1_3_1_2_1");
	}

	void test131() {
		cout << "Test case 131" <<"\n";
		setUp3();
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.unstack("B2", "B5");
		assert(block.isClear("B3"), "3_1_3_2");
		assert(block.isClear("B5"), "3_1_3_2");
		assert(block.isHolding("B2"), "3_1_3_2");
		assert(block.isOn("B5", "B6"), "3_1_3_2");
		assert(block.isOntable("B3"), "3_1_3_2");
		assert(block.isOntable("B6"), "3_1_3_2");
	}

	void test132() {
		cout << "Test case 132" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		assert(block.isClear("B2"), "3_2");
		assert(block.isClear("B6"), "3_2");
		assert(block.isHolding("B5"), "3_2");
		assert(block.isOn("B2", "B3"), "3_2");
		assert(block.isOntable("B3"), "3_2");
		assert(block.isOntable("B6"), "3_2");
		block.putdown("B5");
		assert(block.isClear("B2"), "3_2_1");
		assert(block.isClear("B5"), "3_2_1");
		assert(block.isClear("B6"), "3_2_1");
		assert(block.isOn("B2", "B3"), "3_2_1");
		assert(block.isOntable("B3"), "3_2_1");
		assert(block.isOntable("B5"), "3_2_1");
		assert(block.isOntable("B6"), "3_2_1");
		block.pickup("B5");
		assert(block.isClear("B2"), "3_2_1_1");
		assert(block.isClear("B6"), "3_2_1_1");
		assert(block.isHolding("B5"), "3_2_1_1");
		assert(block.isOn("B2", "B3"), "3_2_1_1");
		assert(block.isOntable("B3"), "3_2_1_1");
		assert(block.isOntable("B6"), "3_2_1_1");
	}

	void test133() {
		cout << "Test case 133" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		assert(block.isClear("B2"), "3_2_1_2");
		assert(block.isClear("B5"), "3_2_1_2");
		assert(block.isHolding("B6"), "3_2_1_2");
		assert(block.isOn("B2", "B3"), "3_2_1_2");
		assert(block.isOntable("B3"), "3_2_1_2");
		assert(block.isOntable("B5"), "3_2_1_2");
		block.putdown("B6");
		assert(block.isClear("B2"), "3_2_1_2_1");
		assert(block.isClear("B5"), "3_2_1_2_1");
		assert(block.isClear("B6"), "3_2_1_2_1");
		assert(block.isOn("B2", "B3"), "3_2_1_2_1");
		assert(block.isOntable("B3"), "3_2_1_2_1");
		assert(block.isOntable("B5"), "3_2_1_2_1");
		assert(block.isOntable("B6"), "3_2_1_2_1");
	}

	void test134() {
		cout << "Test case 134" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		assert(block.isClear("B5"), "3_2_1_2_2");
		assert(block.isClear("B6"), "3_2_1_2_2");
		assert(block.isOn("B2", "B3"), "3_2_1_2_2");
		assert(block.isOn("B6", "B2"), "3_2_1_2_2");
		assert(block.isOntable("B3"), "3_2_1_2_2");
		assert(block.isOntable("B5"), "3_2_1_2_2");
		block.pickup("B5");
		assert(block.isClear("B6"), "3_2_1_2_2_1");
		assert(block.isHolding("B5"), "3_2_1_2_2_1");
		assert(block.isOn("B2", "B3"), "3_2_1_2_2_1");
		assert(block.isOn("B6", "B2"), "3_2_1_2_2_1");
		assert(block.isOntable("B3"), "3_2_1_2_2_1");
		block.putdown("B5");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B2", "B3"), "");
		assert(block.isOn("B6", "B2"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
	}

	void test135() {
		cout << "Test case 135" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B5");
		block.stack("B5", "B6");
		assert(block.isClear("B5"), "");
		assert(block.isOn("B2", "B3"), "");
		assert(block.isOn("B5", "B6"), "");
		assert(block.isOn("B6", "B2"), "");
		assert(block.isOntable("B3"), "");
		block.unstack("B5", "B6");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B5"), "");
		assert(block.isOn("B2", "B3"), "");
		assert(block.isOn("B6", "B2"), "");
		assert(block.isOntable("B3"), "");
	}

	void test136() {
		cout << "Test case 136" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.unstack("B6", "B2");
		assert(block.isClear("B2"), "3_2_1_2_2_2");
		assert(block.isClear("B5"), "3_2_1_2_2_2");
		assert(block.isHolding("B6"), "3_2_1_2_2_2");
		assert(block.isOn("B2", "B3"), "3_2_1_2_2_2");
		assert(block.isOntable("B3"), "3_2_1_2_2_2");
		assert(block.isOntable("B5"), "3_2_1_2_2_2");
	}

	void test137() {
		cout << "Test case 137" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		assert(block.isClear("B2"), "3_2_1_2_3");
		assert(block.isClear("B6"), "3_2_1_2_3");
		assert(block.isOn("B2", "B3"), "3_2_1_2_3");
		assert(block.isOn("B6", "B5"), "3_2_1_2_3");
		assert(block.isOntable("B3"), "3_2_1_2_3");
		assert(block.isOntable("B5"), "3_2_1_2_3");
		block.unstack("B2", "B3");
		assert(block.isClear("B3"), "3_2_1_2_3_1");
		assert(block.isClear("B6"), "3_2_1_2_3_1");
		assert(block.isHolding("B2"), "3_2_1_2_3_1");
		assert(block.isOn("B6", "B5"), "3_2_1_2_3_1");
		assert(block.isOntable("B3"), "3_2_1_2_3_1");
		assert(block.isOntable("B5"), "3_2_1_2_3_1");
		block.putdown("B2");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B6", "B5"), "");
		assert(block.isOntable("B2"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
	}

	void test138() {
		cout << "Test case 138" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B3");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B2", "B3"), "");
		assert(block.isOn("B6", "B5"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
	}

	void test139() {
		cout << "Test case 139" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isOn("B2", "B6"), "");
		assert(block.isOn("B6", "B5"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
		block.pickup("B3");
		assert(block.isClear("B2"), "");
		assert(block.isHolding("B3"), "");
		assert(block.isOn("B2", "B6"), "");
		assert(block.isOn("B6", "B5"), "");
		assert(block.isOntable("B5"), "");
		block.putdown("B3");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isOn("B2", "B6"), "");
		assert(block.isOn("B6", "B5"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
	}

	void test140() {
		cout << "Test case 140" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B3");
		block.stack("B3", "B2");
		assert(block.isClear("B3"), "");
		assert(block.isOn("B2", "B6"), "");
		assert(block.isOn("B3", "B2"), "");
		assert(block.isOn("B6", "B5"), "");
		assert(block.isOntable("B5"), "");
		block.unstack("B3", "B2");
		assert(block.isClear("B2"), "");
		assert(block.isHolding("B3"), "");
		assert(block.isOn("B2", "B6"), "");
		assert(block.isOn("B6", "B5"), "");
		assert(block.isOntable("B5"), "");
	}

	void test141() {
		cout << "Test case 141" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.unstack("B2", "B6");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B2"), "");
		assert(block.isOn("B6", "B5"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
	}

	void test142() {
		cout << "Test case 142" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.unstack("B6", "B5");
		assert(block.isClear("B2"), "3_2_1_2_3_2");
		assert(block.isClear("B5"), "3_2_1_2_3_2");
		assert(block.isHolding("B6"), "3_2_1_2_3_2");
		assert(block.isOn("B2", "B3"), "3_2_1_2_3_2");
		assert(block.isOntable("B3"), "3_2_1_2_3_2");
		assert(block.isOntable("B5"), "3_2_1_2_3_2");
	}

	void test143() {
		cout << "Test case 143" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		assert(block.isClear("B3"), "3_2_1_3");
		assert(block.isClear("B5"), "3_2_1_3");
		assert(block.isClear("B6"), "3_2_1_3");
		assert(block.isHolding("B2"), "3_2_1_3");
		assert(block.isOntable("B3"), "3_2_1_3");
		assert(block.isOntable("B5"), "3_2_1_3");
		assert(block.isOntable("B6"), "3_2_1_3");
		block.putdown("B2");
		assert(block.isClear("B2"), "3_2_1_3_1");
		assert(block.isClear("B3"), "3_2_1_3_1");
		assert(block.isClear("B5"), "3_2_1_3_1");
		assert(block.isClear("B6"), "3_2_1_3_1");
		assert(block.isOntable("B2"), "3_2_1_3_1");
		assert(block.isOntable("B3"), "3_2_1_3_1");
		assert(block.isOntable("B5"), "3_2_1_3_1");
		assert(block.isOntable("B6"), "3_2_1_3_1");
	}

	void test144() {
		cout << "Test case 144" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B3");
		assert(block.isClear("B2"), "3_2_1_3_2");
		assert(block.isClear("B5"), "3_2_1_3_2");
		assert(block.isClear("B6"), "3_2_1_3_2");
		assert(block.isOn("B2", "B3"), "3_2_1_3_2");
		assert(block.isOntable("B3"), "3_2_1_3_2");
		assert(block.isOntable("B5"), "3_2_1_3_2");
		assert(block.isOntable("B6"), "3_2_1_3_2");
	}

	void test145() {
		cout << "Test case 145" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		assert(block.isClear("B2"), "3_2_1_3_3");
		assert(block.isClear("B3"), "3_2_1_3_3");
		assert(block.isClear("B6"), "3_2_1_3_3");
		assert(block.isOn("B2", "B5"), "3_2_1_3_3");
		assert(block.isOntable("B3"), "3_2_1_3_3");
		assert(block.isOntable("B5"), "3_2_1_3_3");
		assert(block.isOntable("B6"), "3_2_1_3_3");
		block.pickup("B3");
		assert(block.isClear("B2"), "3_2_1_3_3_1");
		assert(block.isClear("B6"), "3_2_1_3_3_1");
		assert(block.isHolding("B3"), "3_2_1_3_3_1");
		assert(block.isOn("B2", "B5"), "3_2_1_3_3_1");
		assert(block.isOntable("B5"), "3_2_1_3_3_1");
		assert(block.isOntable("B6"), "3_2_1_3_3_1");
		block.putdown("B3");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B2", "B5"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
	}

	void test146() {
		cout << "Test case 146" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B3");
		block.stack("B3", "B2");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B2", "B5"), "");
		assert(block.isOn("B3", "B2"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
		block.pickup("B6");
		assert(block.isClear("B3"), "");
		assert(block.isHolding("B6"), "");
		assert(block.isOn("B2", "B5"), "");
		assert(block.isOn("B3", "B2"), "");
		assert(block.isOntable("B5"), "");
		block.putdown("B6");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B2", "B5"), "");
		assert(block.isOn("B3", "B2"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
	}

	void test147() {
		cout << "Test case 147" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.pickup("B6");
		block.stack("B6", "B3");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B2", "B5"), "");
		assert(block.isOn("B3", "B2"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B5"), "");
		block.unstack("B6", "B3");
		assert(block.isClear("B3"), "");
		assert(block.isHolding("B6"), "");
		assert(block.isOn("B2", "B5"), "");
		assert(block.isOn("B3", "B2"), "");
		assert(block.isOntable("B5"), "");
	}

	void test148() {
		cout << "Test case 148" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B3", "B2");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B3"), "");
		assert(block.isOn("B2", "B5"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
	}

	void test149() {
		cout << "Test case 149" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isOn("B2", "B5"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
		block.unstack("B2", "B5");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isHolding("B2"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
	}

	void test150() {
		cout << "Test case 150" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.unstack("B3", "B6");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B3"), "");
		assert(block.isOn("B2", "B5"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
	}

	void test151() {
		cout << "Test case 151" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B6");
		assert(block.isClear("B2"), "3_2_1_3_3_2");
		assert(block.isClear("B3"), "3_2_1_3_3_2");
		assert(block.isHolding("B6"), "3_2_1_3_3_2");
		assert(block.isOn("B2", "B5"), "3_2_1_3_3_2");
		assert(block.isOntable("B3"), "3_2_1_3_3_2");
		assert(block.isOntable("B5"), "3_2_1_3_3_2");
		block.putdown("B6");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B2", "B5"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
	}

	void test152() {
		cout << "Test case 152" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B2", "B5"), "");
		assert(block.isOn("B6", "B2"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
		block.pickup("B3");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B3"), "");
		assert(block.isOn("B2", "B5"), "");
		assert(block.isOn("B6", "B2"), "");
		assert(block.isOntable("B5"), "");
		block.putdown("B3");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B2", "B5"), "");
		assert(block.isOn("B6", "B2"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
	}

	void test153() {
		cout << "Test case 153" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B3");
		block.stack("B3", "B6");
		assert(block.isClear("B3"), "");
		assert(block.isOn("B2", "B5"), "");
		assert(block.isOn("B3", "B6"), "");
		assert(block.isOn("B6", "B2"), "");
		assert(block.isOntable("B5"), "");
		block.unstack("B3", "B6");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B3"), "");
		assert(block.isOn("B2", "B5"), "");
		assert(block.isOn("B6", "B2"), "");
		assert(block.isOntable("B5"), "");
	}

	void test154() {
		cout << "Test case 154" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.unstack("B6", "B2");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isHolding("B6"), "");
		assert(block.isOn("B2", "B5"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
	}

	void test155() {
		cout << "Test case 155" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B6"), "");
		assert(block.isOn("B2", "B5"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
		block.unstack("B2", "B5");
		assert(block.isClear("B5"), "");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B2"), "");
		assert(block.isOn("B6", "B3"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
	}

	void test156() {
		cout << "Test case 156" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.unstack("B6", "B3");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isHolding("B6"), "");
		assert(block.isOn("B2", "B5"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
	}

	void test157() {
		cout << "Test case 157" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.unstack("B2", "B5");
		assert(block.isClear("B3"), "3_2_1_3_3_3");
		assert(block.isClear("B5"), "3_2_1_3_3_3");
		assert(block.isClear("B6"), "3_2_1_3_3_3");
		assert(block.isHolding("B2"), "3_2_1_3_3_3");
		assert(block.isOntable("B3"), "3_2_1_3_3_3");
		assert(block.isOntable("B5"), "3_2_1_3_3_3");
		assert(block.isOntable("B6"), "3_2_1_3_3_3");
	}

	void test158() {
		cout << "Test case 158" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		assert(block.isClear("B2"), "3_2_1_3_4");
		assert(block.isClear("B3"), "3_2_1_3_4");
		assert(block.isClear("B5"), "3_2_1_3_4");
		assert(block.isOn("B2", "B6"), "3_2_1_3_4");
		assert(block.isOntable("B3"), "3_2_1_3_4");
		assert(block.isOntable("B5"), "3_2_1_3_4");
		assert(block.isOntable("B6"), "3_2_1_3_4");
		block.pickup("B3");
		assert(block.isClear("B2"), "3_2_1_3_4_1");
		assert(block.isClear("B5"), "3_2_1_3_4_1");
		assert(block.isHolding("B3"), "3_2_1_3_4_1");
		assert(block.isOn("B2", "B6"), "3_2_1_3_4_1");
		assert(block.isOntable("B5"), "3_2_1_3_4_1");
		assert(block.isOntable("B6"), "3_2_1_3_4_1");
		block.putdown("B3");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isOn("B2", "B6"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
	}

	void test159() {
		cout << "Test case 159" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B3");
		block.stack("B3", "B2");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isOn("B2", "B6"), "");
		assert(block.isOn("B3", "B2"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
		block.pickup("B5");
		assert(block.isClear("B3"), "");
		assert(block.isHolding("B5"), "");
		assert(block.isOn("B2", "B6"), "");
		assert(block.isOn("B3", "B2"), "");
		assert(block.isOntable("B6"), "");
		block.putdown("B5");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isOn("B2", "B6"), "");
		assert(block.isOn("B3", "B2"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
	}

	void test160() {
		cout << "Test case 160" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.pickup("B5");
		block.stack("B5", "B3");
		assert(block.isClear("B5"), "");
		assert(block.isOn("B2", "B6"), "");
		assert(block.isOn("B3", "B2"), "");
		assert(block.isOn("B5", "B3"), "");
		assert(block.isOntable("B6"), "");
		block.unstack("B5", "B3");
		assert(block.isClear("B3"), "");
		assert(block.isHolding("B5"), "");
		assert(block.isOn("B2", "B6"), "");
		assert(block.isOn("B3", "B2"), "");
		assert(block.isOntable("B6"), "");
	}

	void test161() {
		cout << "Test case 161" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B3", "B2");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B5"), "");
		assert(block.isHolding("B3"), "");
		assert(block.isOn("B2", "B6"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
	}

	void test162() {
		cout << "Test case 162" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B3");
		block.stack("B3", "B5");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isOn("B2", "B6"), "");
		assert(block.isOn("B3", "B5"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
		block.unstack("B2", "B6");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B6"), "");
		assert(block.isHolding("B2"), "");
		assert(block.isOn("B3", "B5"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
	}

	void test163() {
		cout << "Test case 163" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.unstack("B3", "B5");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B5"), "");
		assert(block.isHolding("B3"), "");
		assert(block.isOn("B2", "B6"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
	}

	void test164() {
		cout << "Test case 164" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B5");
		assert(block.isClear("B2"), "3_2_1_3_4_2");
		assert(block.isClear("B3"), "3_2_1_3_4_2");
		assert(block.isHolding("B5"), "3_2_1_3_4_2");
		assert(block.isOn("B2", "B6"), "3_2_1_3_4_2");
		assert(block.isOntable("B3"), "3_2_1_3_4_2");
		assert(block.isOntable("B6"), "3_2_1_3_4_2");
		block.putdown("B5");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isOn("B2", "B6"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B5"), "");
		assert(block.isOntable("B6"), "");
	}

	void test165() {
		cout << "Test case 165" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B5");
		block.stack("B5", "B2");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isOn("B2", "B6"), "");
		assert(block.isOn("B5", "B2"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B6"), "");
		block.pickup("B3");
		assert(block.isClear("B5"), "");
		assert(block.isHolding("B3"), "");
		assert(block.isOn("B2", "B6"), "");
		assert(block.isOn("B5", "B2"), "");
		assert(block.isOntable("B6"), "");
		block.putdown("B3");
		assert(block.isClear("B3"), "");
		assert(block.isClear("B5"), "");
		assert(block.isOn("B2", "B6"), "");
		assert(block.isOn("B5", "B2"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B6"), "");
	}

	void test166() {
		cout << "Test case 166" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B5");
		block.stack("B5", "B2");
		block.pickup("B3");
		block.stack("B3", "B5");
		assert(block.isClear("B3"), "");
		assert(block.isOn("B2", "B6"), "");
		assert(block.isOn("B3", "B5"), "");
		assert(block.isOn("B5", "B2"), "");
		assert(block.isOntable("B6"), "");
		block.unstack("B3", "B5");
		assert(block.isClear("B5"), "");
		assert(block.isHolding("B3"), "");
		assert(block.isOn("B2", "B6"), "");
		assert(block.isOn("B5", "B2"), "");
		assert(block.isOntable("B6"), "");
	}

	void test167() {
		cout << "Test case 167" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B5");
		block.stack("B5", "B2");
		block.unstack("B5", "B2");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B3"), "");
		assert(block.isHolding("B5"), "");
		assert(block.isOn("B2", "B6"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B6"), "");
	}

	void test168() {
		cout << "Test case 168" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B5");
		block.stack("B5", "B3");
		assert(block.isClear("B2"), "");
		assert(block.isClear("B5"), "");
		assert(block.isOn("B2", "B6"), "");
		assert(block.isOn("B5", "B3"), "");
		assert(block.isOntable("B3"), "");
		assert(block.isOntable("B6"), "");
	}

	void test169() {
		cout << "Test case 169" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.unstack("B2", "B6");
		assert(block.isClear("B3"), "3_2_1_3_4_3");
		assert(block.isClear("B5"), "3_2_1_3_4_3");
		assert(block.isClear("B6"), "3_2_1_3_4_3");
		assert(block.isHolding("B2"), "3_2_1_3_4_3");
		assert(block.isOntable("B3"), "3_2_1_3_4_3");
		assert(block.isOntable("B5"), "3_2_1_3_4_3");
		assert(block.isOntable("B6"), "3_2_1_3_4_3");
	}

	void test170() {
		cout << "Test case 170" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		assert(block.isClear("B5"), "3_2_2");
		assert(block.isClear("B6"), "3_2_2");
		assert(block.isOn("B2", "B3"), "3_2_2");
		assert(block.isOn("B5", "B2"), "3_2_2");
		assert(block.isOntable("B3"), "3_2_2");
		assert(block.isOntable("B6"), "3_2_2");
		block.pickup("B6");
		assert(block.isClear("B5"), "3_2_2_1");
		assert(block.isHolding("B6"), "3_2_2_1");
		assert(block.isOn("B2", "B3"), "3_2_2_1");
		assert(block.isOn("B5", "B2"), "3_2_2_1");
		assert(block.isOntable("B3"), "3_2_2_1");
		block.putdown("B6");
		assert(block.isClear("B5"), "3_2_2_1_1");
		assert(block.isClear("B6"), "3_2_2_1_1");
		assert(block.isOn("B2", "B3"), "3_2_2_1_1");
		assert(block.isOn("B5", "B2"), "3_2_2_1_1");
		assert(block.isOntable("B3"), "3_2_2_1_1");
		assert(block.isOntable("B6"), "3_2_2_1_1");
	}

	void test171() {
		cout << "Test case 171" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B6");
		block.stack("B6", "B5");
		assert(block.isClear("B6"), "3_2_2_1_2");
		assert(block.isOn("B2", "B3"), "3_2_2_1_2");
		assert(block.isOn("B5", "B2"), "3_2_2_1_2");
		assert(block.isOn("B6", "B5"), "3_2_2_1_2");
		assert(block.isOntable("B3"), "3_2_2_1_2");
		block.unstack("B6", "B5");
		assert(block.isClear("B5"), "3_2_2_1_2_1");
		assert(block.isHolding("B6"), "3_2_2_1_2_1");
		assert(block.isOn("B2", "B3"), "3_2_2_1_2_1");
		assert(block.isOn("B5", "B2"), "3_2_2_1_2_1");
		assert(block.isOntable("B3"), "3_2_2_1_2_1");
	}

	void test172() {
		cout << "Test case 172" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.unstack("B5", "B2");
		assert(block.isClear("B2"), "3_2_2_2");
		assert(block.isClear("B6"), "3_2_2_2");
		assert(block.isHolding("B5"), "3_2_2_2");
		assert(block.isOn("B2", "B3"), "3_2_2_2");
		assert(block.isOntable("B3"), "3_2_2_2");
		assert(block.isOntable("B6"), "3_2_2_2");
	}

	void test173() {
		cout << "Test case 173" <<"\n";
		setUp3();
		block.unstack("B5", "B6");
		block.stack("B5", "B6");
		assert(block.isClear("B2"), "3_2_3");
		assert(block.isClear("B5"), "3_2_3");
		assert(block.isOn("B2", "B3"), "3_2_3");
		assert(block.isOn("B5", "B6"), "3_2_3");
		assert(block.isOntable("B3"), "3_2_3");
		assert(block.isOntable("B6"), "3_2_3");
	}

	public: void testAll(){
		test1();
		test2();
		test3();
		test4();
		test5();
		test6();
		test7();
		test8();
		test9();
		test10();
		test11();
		test12();
		test13();
		test14();
		test15();
		test16();
		test17();
		test18();
		test19();
		test20();
		test21();
		test22();
		test23();
		test24();
		test25();
		test26();
		test27();
		test28();
		test29();
		test30();
		test31();
		test32();
		test33();
		test34();
		test35();
		test36();
		test37();
		test38();
		test39();
		test40();
		test41();
		test42();
		test43();
		test44();
		test45();
		test46();
		test47();
		test48();
		test49();
		test50();
		test51();
		test52();
		test53();
		test54();
		test55();
		test56();
		test57();
		test58();
		test59();
		test60();
		test61();
		test62();
		test63();
		test64();
		test65();
		test66();
		test67();
		test68();
		test69();
		test70();
		test71();
		test72();
		test73();
		test74();
		test75();
		test76();
		test77();
		test78();
		test79();
		test80();
		test81();
		test82();
		test83();
		test84();
		test85();
		test86();
		test87();
		test88();
		test89();
		test90();
		test91();
		test92();
		test93();
		test94();
		test95();
		test96();
		test97();
		test98();
		test99();
		test100();
		test101();
		test102();
		test103();
		test104();
		test105();
		test106();
		test107();
		test108();
		test109();
		test110();
		test111();
		test112();
		test113();
		test114();
		test115();
		test116();
		test117();
		test118();
		test119();
		test120();
		test121();
		test122();
		test123();
		test124();
		test125();
		test126();
		test127();
		test128();
		test129();
		test130();
		test131();
		test132();
		test133();
		test134();
		test135();
		test136();
		test137();
		test138();
		test139();
		test140();
		test141();
		test142();
		test143();
		test144();
		test145();
		test146();
		test147();
		test148();
		test149();
		test150();
		test151();
		test152();
		test153();
		test154();
		test155();
		test156();
		test157();
		test158();
		test159();
		test160();
		test161();
		test162();
		test163();
		test164();
		test165();
		test166();
		test167();
		test168();
		test169();
		test170();
		test171();
		test172();
		test173();
	}

};

int main() {
	BlockTester_RT tester;
	tester.testAll();
	cout << "\n\n";
	system("PAUSE");
}
